import ast
import configparser
import gc
import json
import os
import time
from datetime import datetime, timedelta

import numpy as np
import pandas as pd
import tensorflow as tf
import torch
from dateutil.relativedelta import relativedelta
from keras.callbacks import EarlyStopping, ModelCheckpoint
from keras.saving.save import load_model
from sklearn.preprocessing import StandardScaler

import builders.storage_builder as stb
import globals.global_settings as gls
import globals.run_settings as rns
from globals import global_utils as mnu

os.environ['TF_FORCE_GPU_ALLOW_GROWTH'] = 'true'
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '0'
np.set_printoptions(formatter={'float': '{:0.3f}'.format})
pd.set_option('display.max_colwidth', None)
pd.set_option('display.max_rows', None)
pd.set_option('display.max_columns', None)
pd.set_option('display.width', None)

mnu.debug_print(f'Tensorflow -- ver:{tf.__version__}')
gpus = tf.config.list_physical_devices('GPU')
if gpus:
    for gpu in gpus:
        tf.config.experimental.set_memory_growth(gpu, True)
    logical_gpus = tf.config.experimental.list_logical_devices('GPU')
    mnu.debug_print(f'{len(gpus)} Physical GPUs {len(logical_gpus)} Logical GPUs')
mnu.debug_print(f'Pytorch -- ver:{torch.__version__}')
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
mnu.debug_print(f"Device:{device} - Available:{torch.cuda.is_available()}")

DEFAULT_TARGETS = ['PTS','REB','AST']
DEFAULT_CATEGORYS = ['PLAYER_ID','TEAM_NAME','OPP_NAME','START_POSITION','OFFICIAL1','OFFICIAL2','POSITION','GAME_DAY','AGE','HEIGHT','WEIGHT','SCHOOL','COUNTRY','OPP_PLAYER_ID','SEASON']
DEFAULT_POSITIONS = ['ALL','CENTER','CENTER-FORWARD','FORWARD','FORWARD-CENTER','FORWARD-GUARD','GUARD','GUARD-FORWARD']
DEFAULT_ACTIVATIONS = ['relu','sigmoid','softmax','linear','selu','softplus','swish','tanh','gelu','elu']
DEFAULT_TARGET_MINMAX = {DEFAULT_TARGETS[0]:[1,16,14,40],DEFAULT_TARGETS[1]:[1,6,4,15],DEFAULT_TARGETS[2]:[1,6,4,15]}
DEFAULT_CONF_RANGE = [2,4]
DEFAULT_CAT_RANGE = [48,1024]
DEFAULT_BATCH_RANGE = [256,2048]
DEFAULT_UNITS_RANGE = [[48,2048],[48,1024]]
DEFAULT_DROPOUTS_RANGE = [.01,.60]
DEFAULT_LEARNRATE_RANGE = [0.0001,.01]
DEFAULT_EPOCH_RANGE = [10,100]
DEFAULT_L2_RANGE = [0.0,0.0001]
CURRENT_DAY = datetime.today()
CURRENT_YEAR = datetime.today().year
#######################################################
DEFAULT_TRAIN_STARTS = [2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015]
if rns.use_seasons:
    DEFAULT_VALID_STARTS = [CURRENT_YEAR - 5,CURRENT_YEAR - 4,CURRENT_YEAR -3]
    DEFAULT_TEST_STARTS = [CURRENT_YEAR - 2,CURRENT_YEAR - 1]
    DEFAULT_PRED_STARTS = [(CURRENT_DAY - relativedelta(months=1)).strftime('%Y-%m-%d')]
else:
    DEFAULT_VALID_STARTS = [(CURRENT_DAY - relativedelta(years=5)).strftime('%Y-%m-%d'),
                            (CURRENT_DAY - relativedelta(years=4)).strftime('%Y-%m-%d'),
                            (CURRENT_DAY - relativedelta(years=3)).strftime('%Y-%m-%d'),
                            (CURRENT_DAY - relativedelta(years=2)).strftime('%Y-%m-%d'),
                            (CURRENT_DAY - relativedelta(years=1)).strftime('%Y-%m-%d')]
    DEFAULT_TEST_STARTS = [
        (datetime.strptime(date_str, '%Y-%m-%d') + timedelta(days=12)).strftime('%Y-%m-%d')
        for date_str in DEFAULT_VALID_STARTS
    ]
    DEFAULT_PRED_STARTS = [(CURRENT_DAY - relativedelta(months=1)).strftime('%Y-%m-%d')]
#######################################################
DEFAULT_IS_HOMESTARTER_AMPLIFY = [1,10,1,10]
DEFAULT_LEARNER_RANGES = [[0.7, 0.9, 1.0, 1.2],[1.1, 1.3, 1.4, 1.6],[1.65, 1.85, 2.15, 2.45],[0.6, 0.7, 0.8, 0.9],[0.35, 0.55, 0.6, 0.7],[0.2, 0.3, 0.35, 0.5],[0.7, 0.8, 1.2, 1.3]]
DEFAULT_FEATURES = [
    ################  IGNORING  ####################################
    # ,'GAMEDATEINT','BIRTHDATEINT','BACKTOBACKGAME','WEEK_PLAYTIME','DAYS_OUT','DISTANCE','TLOSS', 'OWIN','GAMES_OUT'
    ################################################################
    'IS_HOME','YEARS_IN_TEAM','IS_STARTING'
    ,'OPP_DISTANCE','LAST_GAME_DAYS','TWIN', 'OLOSS'
    ,'GAMES_IN', 'GAMES_CONT', 'GAMES_START', 'GAMES_BENCH'
    ,'AVG_MIN', 'RT3_MIN', 'RT5_MIN', 'RT9_MIN'
    ,'AVG_PTS', 'RT3_PTS', 'RT5_PTS', 'RT9_PTS'
    ,'AVG_REB', 'RT3_REB'
    ,'AVG_AST', 'RT3_AST'
    ,'AVG_FGM', 'RT3_FGM'
    ,'AVG_FGA', 'RT3_FGA'
    ,'AVG_FG3M', 'RT3_FG3M'
    ,'AVG_FG3A', 'RT3_FG3A'
    ,'AVG_FTM', 'RT3_FTM'
    ,'AVG_FTA', 'RT3_FTA'
    ,'RTZ_MIN', 'RTZ_PTS', 'RTZ_REB', 'RTZ_AST'
    ,'RTZ_FGM', 'RTZ_FGA', 'RTZ_FG3M', 'RTZ_FG3A', 'RTZ_FTM', 'RTZ_FTA'
    ,'PREV_PTS', 'PREV_AST', 'PREV_REB', 'PREV_MIN'
    ,'LAST_PTS', 'LAST_AST', 'LAST_REB'
    ,'PREV_FGA', 'PREV_FGM', 'PREV_FTA', 'PREV_FTM', 'PREV_FG3A', 'PREV_FG3M'
    ,'LOSSES_B', 'DISTANCE_B', 'GAMES_OUT_B', 'OPP_WINS_B', 'TLOSS_B', 'OWIN_B'
    ,'DAYS_OUT_B', 'BACKTOBACKGAME_B', 'WEEK_PLAYTIME_B', 'ALTITUDE_B'
    ,'OPP_LAST_GAME_DAYS_B','OPP_BACKTOBACKGAME','OPP_WEEK_PLAYTIME'
    ,'OPP_DEF_PTS1','OPP_DEF_PTS3','OPP_DEF_PTS5','OPP_DEF_PTS9','OPP_DEF_PTSAVG'
    ,'OPP_DEF_REB1','OPP_DEF_REB3','OPP_DEF_REBAVG'
    ,'OPP_DEF_AST1','OPP_DEF_AST3','OPP_DEF_ASTAVG'
    ,'TEAM_OUT', 'OPP_OUT'
    ,'MAX_PTS','MAX_AST','MAX_REB','MAX_MIN'
    ,'PREV_PF','RT3_PF','AVG_PF'
    ,'PREV_STL','RT3_STL','AVG_STL'
    ,'PREV_BLK','RT3_BLK','AVG_BLK'
    ,'OPP_PREV_PF_B','OPP_RT3_PF_B','OPP_AVG_PF_B'
    ,'OPP_PREV_STL_B','OPP_RT3_STL_B','OPP_AVG_STL_B'
    ,'OPP_PREV_BLK_B','OPP_RT3_BLK_B','OPP_AVG_BLK_B'
    ,'OPP_DEF_PREVRANK_B','OPP_DEF_RT3RANK_B','OPP_DEF_AVGRANK_B'
################################################################################################################
    ,'MAX_FGA','MAX_FGM','MAX_FTA','MAX_FTM','MAX_FG3A','MAX_FG3M'
    ,'RT3_OREB','RTZ_OREB','AVG_OREB','RT3_DREB','RTZ_DREB','AVG_DREB','RTZ_PF','RTZ_STL','RTZ_BLK'
    ,'RT5_FTA','RT9_FTA','RT5_FTM','RT9_FTM','RT5_FG3A','RT9_FG3A','RT5_FG3M','RT9_FG3M','RT5_FGA','RT9_FGA','RT5_FGM','RT9_FGM','RT5_PF','RT9_PF','RT5_AST','RT5_REB'
    ,'OFFICIAL1_LAST_PTS','OFFICIAL1_LAST_AST','OFFICIAL1_LAST_REB','OFFICIAL1_LAST_TO','OFFICIAL1_LAST_PF'
    ,'OFFICIAL1_2NDLAST_PTS','OFFICIAL1_2NDLAST_AST','OFFICIAL1_2NDLAST_REB','OFFICIAL1_2NDLAST_TO','OFFICIAL1_2NDLAST_PF'
    ,'OFFICIAL1_3RDLAST_PTS','OFFICIAL1_3RDLAST_AST','OFFICIAL1_3RDLAST_REB','OFFICIAL1_3RDLAST_TO','OFFICIAL1_3RDLAST_PF'
    ,'OFFICIAL1_4THLAST_PTS','OFFICIAL1_4THLAST_AST','OFFICIAL1_4THLAST_REB','OFFICIAL1_4THLAST_TO','OFFICIAL1_4THLAST_PF'
    ,'OFFICIAL1_5THLAST_PTS','OFFICIAL1_5THLAST_AST','OFFICIAL1_5THLAST_REB','OFFICIAL1_5THLAST_TO','OFFICIAL1_5THLAST_PF'
    ,'OFFICIAL1_6THLAST_PTS','OFFICIAL1_6THLAST_AST','OFFICIAL1_6THLAST_REB','OFFICIAL1_6THLAST_TO','OFFICIAL1_6THLAST_PF'
    ,'OFFICIAL2_LAST_PTS','OFFICIAL2_LAST_AST','OFFICIAL2_LAST_REB','OFFICIAL2_LAST_TO','OFFICIAL2_LAST_PF'
    ,'OFFICIAL2_2NDLAST_PTS','OFFICIAL2_2NDLAST_AST','OFFICIAL2_2NDLAST_REB','OFFICIAL2_2NDLAST_TO','OFFICIAL2_2NDLAST_PF'
    ,'OFFICIAL2_3RDLAST_PTS','OFFICIAL2_3RDLAST_AST','OFFICIAL2_3RDLAST_REB','OFFICIAL2_3RDLAST_TO','OFFICIAL2_3RDLAST_PF'
    ,'OFFICIAL2_4THLAST_PTS','OFFICIAL2_4THLAST_AST','OFFICIAL2_4THLAST_REB','OFFICIAL2_4THLAST_TO','OFFICIAL2_4THLAST_PF'
    ,'OFFICIAL2_5THLAST_PTS','OFFICIAL2_5THLAST_AST','OFFICIAL2_5THLAST_REB','OFFICIAL2_5THLAST_TO','OFFICIAL2_5THLAST_PF'
    ,'OFFICIAL2_6THLAST_PTS','OFFICIAL2_6THLAST_AST','OFFICIAL2_6THLAST_REB','OFFICIAL2_6THLAST_TO','OFFICIAL2_6THLAST_PF'

################################################################################################################
###############################################   NEVER ADD THESE   ############################################
    # ,'TEAM_ALLOUT', 'OPP_ALLOUT'
    # ,'TEAM_OUT_START','TEAM_OUT_BENCH','OPP_OUT_START','OPP_OUT_BENCH'
    # ,'TEAM_CENTERS_IN_B','TEAM_FORWARDS_IN_B','TEAM_GUARDS_IN_B','OPP_CENTERS_IN_B','OPP_FORWARDS_IN_B','OPP_GUARDS_IN_B'
################################################################################################################
]

rand = np.random.default_rng()
EVAL_LOSS = '0.000'
CURRENT_LOSS = 0.0
EPOCH_LEARN_STATES = []
AI_LEARNER = []
RESET_STATE_ON_NEWRUN = True
AI_SAVE_STATE = True
MAIN_STATE = {}

FEATURE_USED = DEFAULT_FEATURES
CATEGORY_USED = DEFAULT_CATEGORYS
TARGET_USED = DEFAULT_TARGETS[0]
POSITION_USED = 'ALL'
DROPOUTS_USED = [0.05,0.25]
UNITS_USED = [1700,1500]
L2_USED = [0.0,0.0]
ACTIVATIONS_USED = ['relu','sigmoid','relu']
MINMAX_USED = [7,24]
LEARNING_RATE_USED = 0.0001 #0.001
EPOCH_COUNT_USED = 100
BATCHSIZE_USED = 256
SHUFFLE_USED = False
BATCHNORM_USED = False
#######################################################
if rns.use_seasons:
    TRAIN_START_YEAR_USED = 2005
    VALID_START_YEAR_USED = CURRENT_YEAR - 3
    TEST_START_YEAR_USED = CURRENT_YEAR - 2
    PRED_START_DATE_USED = [(CURRENT_DAY - relativedelta(months=1)).strftime('%Y-%m-%d')]
else:
    TRAIN_START_YEAR_USED = 2005
    VALID_START_YEAR_USED = [(CURRENT_DAY - relativedelta(months=3)).strftime('%Y-%m-%d')]
    TEST_START_YEAR_USED = [(CURRENT_DAY - relativedelta(months=2)).strftime('%Y-%m-%d')]
    PRED_START_DATE_USED = [(CURRENT_DAY - relativedelta(months=1)).strftime('%Y-%m-%d')]
#######################################################
MAX_CATPART_USED = 500
CONFIDENCE_USED = 3
HOME_START_AMPLIFY = [DEFAULT_IS_HOMESTARTER_AMPLIFY[0],DEFAULT_IS_HOMESTARTER_AMPLIFY[2]]
LEARNERRANGE_USED = [[0.8, 1.1],[1.25, 1.45],[1.75, 2.25],[0.65, 0.85],[0.45, 0.65],[0.25, 0.4],[0.75, 1.25]]
FILTERS_USED = {'POSITION': POSITION_USED, 'MINAVG': MINMAX_USED[0], 'MAXAVG': MINMAX_USED[1]}
MODEL_LAYERS_USED = {'LAYER_1': {'ACTIVATION': ACTIVATIONS_USED[0],'UNITS': UNITS_USED[0], 'DROPOUT': DROPOUTS_USED[0], 'L2_USED': L2_USED[0]},'LAYER_2': {'ACTIVATION': ACTIVATIONS_USED[1],'UNITS': UNITS_USED[1], 'DROPOUT': DROPOUTS_USED[1], 'L2_USED': L2_USED[1]},'LAYER_3': {'ACTIVATION': ACTIVATIONS_USED[2],'UNITS': 1, 'DROPOUT': -1, 'L2_USED': -1}}
PREDICTION_OUTPUT_COLUMNS = []

MAIN_STATE = {'TARGET_COLUMN': TARGET_USED,'MAIN_FILTERS': FILTERS_USED,'MODEL_SHUFFLE_DATA': SHUFFLE_USED,'MODEL_BATCH_SIZE': BATCHSIZE_USED,'MAX_CATPART':MAX_CATPART_USED,'BATCHNORM_USED':BATCHNORM_USED,
              'MODEL_LEARNING_RATE': LEARNING_RATE_USED,'TRAIN_EPOCH_COUNT': EPOCH_COUNT_USED,'CONFIDENCE_CHECKS': CONFIDENCE_USED,
              'AI_SAVE_STATE': AI_SAVE_STATE,'HOME_START_AMPLIFY':HOME_START_AMPLIFY,'RESET_STATE_ON_NEWRUN': RESET_STATE_ON_NEWRUN,
              'TRAIN_START_YEAR': TRAIN_START_YEAR_USED,'VALID_START_YEAR': VALID_START_YEAR_USED,'TEST_START_YEAR': TEST_START_YEAR_USED,'PRED_START_DATE': PRED_START_DATE_USED,
              'MODEL_LAYERS': MODEL_LAYERS_USED,'CATEGORY_COLUMNS': CATEGORY_USED,'FEATURE_COLUMNS': FEATURE_USED,'PREDICTION_OUTPUT_COLUMNS': PREDICTION_OUTPUT_COLUMNS,
              'LEARNERRANGE_USED': LEARNERRANGE_USED,'EPOCH_LEARN_STATES': EPOCH_LEARN_STATES,
              'RUN_TIME_DATE': None, 'TOP_PATH': None,'EVAL_LOSS': EVAL_LOSS,'PRED_CORRECT_COUNT': 0.0, 'PRED_TOTAL_COUNT': 0.0, 'PRED_PERCENTAGE': 0.0}

LOADED_STATES = [{"TARGET_COLUMN":"REB","MAIN_FILTERS":{"POSITION":"ALL","MINAVG":"2","MAXAVG":-1},"MODEL_SHUFFLE_DATA":False,"MODEL_BATCH_SIZE":"848","MAX_CATPART":"287","MODEL_LEARNING_RATE":0.0022134831460674156,"TRAIN_EPOCH_COUNT":"10","CONFIDENCE_CHECKS":"4","AI_SAVE_STATE":True,"HOME_START_AMPLIFY":["1","1"],"RESET_STATE_ON_NEWRUN":True,"TRAIN_START_YEAR":2005,"VALID_START_YEAR":2021,"TEST_START_YEAR":2023,"PRED_START_DATE":"2024-11-01","MODEL_LAYERS":{"LAYER_1":{"ACTIVATION":"relu","UNITS":"533","DROPOUT":0.01},"LAYER_2":{"ACTIVATION":"selu","UNITS":"51","DROPOUT":0.17},"LAYER_3":{"ACTIVATION":"relu","UNITS":1,"DROPOUT":-1}},"CATEGORY_COLUMNS":["PLAYER_ID","OFFICIAL1","POSITION","GAME_DAY","AGE","WEIGHT","COUNTRY","SEASON"],"FEATURE_COLUMNS":["IS_HOME","YEARS_IN_TEAM","OPP_DISTANCE","LAST_GAME_DAYS","OLOSS","GAMES_IN","GAMES_START","GAMES_BENCH","AVG_MIN","RT3_MIN","RT5_MIN","RT9_MIN","AVG_PTS","RT3_PTS","RT5_PTS","RT9_PTS","AVG_REB","AVG_AST","RT3_AST","AVG_FGM","RT3_FGM","AVG_FGA","RT3_FGA","AVG_FG3M","RT3_FG3M","AVG_FG3A","RT3_FG3A","AVG_FTM","RT3_FTM","AVG_FTA","RT3_FTA","RTZ_MIN","RTZ_PTS","RTZ_REB","RTZ_AST","RTZ_FGM","RTZ_FGA","RTZ_FG3M","RTZ_FG3A","RTZ_FTM","RTZ_FTA","PREV_AST","PREV_REB","PREV_FGA","PREV_FGM","PREV_FTA","PREV_FTM","PREV_FG3A","PREV_FG3M","LOSSES_B","DISTANCE_B","GAMES_OUT_B","OPP_WINS_B","TLOSS_B","OWIN_B","DAYS_OUT_B","BACKTOBACKGAME_B","WEEK_PLAYTIME_B","OPP_LAST_GAME_DAYS_B","OPP_DEF_PTS1","OPP_DEF_PTS3","OPP_DEF_PTS5","OPP_DEF_PTS9","OPP_DEF_REB1","OPP_DEF_REB3","OPP_DEF_AST1","OPP_DEF_AST3","OPP_DEF_ASTAVG","TEAM_OUT","OPP_OUT","MAX_PTS","MAX_AST","MAX_REB","MAX_MIN","PREV_PF","RT3_PF","PREV_STL","RT3_STL","AVG_STL","PREV_BLK","RT3_BLK","AVG_BLK","OPP_PREV_PF_B","OPP_RT3_PF_B","OPP_AVG_PF_B","OPP_PREV_STL_B","OPP_RT3_STL_B","OPP_AVG_STL_B","OPP_PREV_BLK_B","OPP_RT3_BLK_B","OPP_AVG_BLK_B","OPP_DEF_PREVRANK_B","OPP_DEF_RT3RANK_B","OPP_DEF_AVGRANK_B","MAX_FGA","MAX_FGM","MAX_FTA","RT3_OREB","RTZ_OREB","RT3_DREB","RTZ_DREB","AVG_DREB","RTZ_PF","RTZ_STL","RT5_FTA","RT9_FTA","RT5_FTM","RT9_FTM","RT5_FG3A","RT9_FG3A","RT5_FG3M","RT5_FGA","RT9_FGA","RT5_FGM","RT9_FGM","RT5_PF","RT9_PF","RT5_AST","RT5_REB"],"PREDICTION_OUTPUT_COLUMNS":["SEASON","GAME_ID","PLAYER_ID","GAME_DATE","TEAM_NAME","PLAYER_NAME","AVG_REB","RTZ_REB","RT3_REB","RT5_REB","RT9_REB","PREV_REB","TEAM_OUT","OPP_OUT","OPP_PLAYER_ID","OPP_PLAYER_NAME","OPP_DEF_REB1","OPP_DEF_REB3","OPP_DEF_REBAVG","WEEK_PLAYTIME","OPP_WEEK_PLAYTIME","LAST_GAME_DAYS","OPP_LAST_GAME_DAYS","START_POSITION","DISTANCE","ALTITUDE","IS_HOME","OPP_DEF_PREVRANK","OPP_DEF_RT3RANK","OPP_DEF_AVGRANK","LAST_REB"],"LEARNERRANGE_USED":[[0.7861735191799937,1.1421758449415065],[1.1484087916131134,1.5665627078518924],[1.7697494501141455,2.2017075296620834],[0.6133382438295916,0.8873608672277292],[0.4424733386280775,0.6077879365480289],[0.26912548647802326,0.36327192333007613],[0.7728174829092688,1.2664706622900352]],"EPOCH_LEARN_STATES":[{"EPOCH":0,"LEARN_RATE":0.0022134831460674156,"CURRENT_LOSS":0.0},{"EPOCH":1,"LEARN_RATE":0.0022134831460674156,"CURRENT_LOSS":7.741110324859619},{"EPOCH":2,"LEARN_RATE":0.0022134831460674156,"CURRENT_LOSS":7.4356255531311035},{"EPOCH":3,"LEARN_RATE":0.0018385934798389725,"CURRENT_LOSS":7.36919641494751},{"EPOCH":4,"LEARN_RATE":0.001933397779591401,"CURRENT_LOSS":7.367977619171143},{"EPOCH":5,"LEARN_RATE":0.0022049880917338486,"CURRENT_LOSS":7.337474346160889},{"EPOCH":6,"LEARN_RATE":0.0022190445701810026,"CURRENT_LOSS":7.306307315826416},{"EPOCH":7,"LEARN_RATE":0.0022501483436453127,"CURRENT_LOSS":7.297043323516846},{"EPOCH":8,"LEARN_RATE":0.0018448383556702555,"CURRENT_LOSS":7.263738632202148},{"EPOCH":9,"LEARN_RATE":0.0017623272522863055,"CURRENT_LOSS":7.240722179412842}],"RUN_TIME_DATE":"2024-03-19_09-28-41","TOP_PATH":"C:\\Files\\source\\current\\home\\sportsai/data/ai/top/30.87_2024-03-19_09-28-41_ALL_REB/","EVAL_LOSS":0.0,"PRED_CORRECT_COUNT":1059,"PRED_TOTAL_COUNT":3431,"PRED_PERCENTAGE":30.865636840571263}
    ,{"TARGET_COLUMN":"PTS","MAIN_FILTERS":{"POSITION":"ALL","MINAVG":11,"MAXAVG":-1},"MODEL_SHUFFLE_DATA":True,"MODEL_BATCH_SIZE":"675","MAX_CATPART":"827","MODEL_LEARNING_RATE":0.002102247191011236,"TRAIN_EPOCH_COUNT":"14","CONFIDENCE_CHECKS":"3","AI_SAVE_STATE":True,"HOME_START_AMPLIFY":[2,3],"RESET_STATE_ON_NEWRUN":True,"TRAIN_START_YEAR":2007,"VALID_START_YEAR":2020,"TEST_START_YEAR":2022,"PRED_START_DATE":"2024-11-01","MODEL_LAYERS":{"LAYER_1":{"ACTIVATION":"softplus","UNITS":1031,"DROPOUT":0.04},"LAYER_2":{"ACTIVATION":"relu","UNITS":928,"DROPOUT":0.3},"LAYER_3":{"ACTIVATION":"relu","UNITS":1,"DROPOUT":-1}},"CATEGORY_COLUMNS":["PLAYER_ID","TEAM_NAME","OPP_NAME","START_POSITION","OFFICIAL2","POSITION","GAME_DAY","AGE","HEIGHT","WEIGHT","SCHOOL","COUNTRY","OPP_PLAYER_ID"],"FEATURE_COLUMNS":["YEARS_IN_TEAM","IS_STARTING","OPP_DISTANCE","LAST_GAME_DAYS","TWIN","GAMES_IN","GAMES_CONT","GAMES_START","GAMES_BENCH","AVG_MIN","RT3_MIN","RT5_MIN","RT9_MIN","AVG_PTS","RT5_PTS","RT9_PTS","RT3_REB","AVG_AST","RT3_AST","RT3_FGM","RT3_FGA","AVG_FG3M","AVG_FG3A","RT3_FG3A","AVG_FTA","RT3_FTA","RTZ_MIN","RTZ_REB","RTZ_AST","RTZ_FGM","RTZ_FGA","RTZ_FG3M","RTZ_FTA","PREV_PTS","PREV_AST","PREV_REB","PREV_MIN","PREV_FGA","PREV_FTA","PREV_FTM","PREV_FG3A","PREV_FG3M","LOSSES_B","DISTANCE_B","OPP_WINS_B","TLOSS_B","OWIN_B","DAYS_OUT_B","BACKTOBACKGAME_B","ALTITUDE_B","OPP_LAST_GAME_DAYS_B","OPP_WEEK_PLAYTIME","OPP_DEF_PTS1","OPP_DEF_PTS3","OPP_DEF_PTS9","OPP_DEF_PTSAVG","OPP_DEF_REB1","OPP_DEF_REB3","OPP_DEF_REBAVG","OPP_DEF_AST1","OPP_DEF_AST3","OPP_DEF_ASTAVG","TEAM_OUT","OPP_OUT","MAX_PTS","MAX_AST","MAX_REB","MAX_MIN","RT3_PF","AVG_PF","PREV_STL","RT3_STL","AVG_STL","PREV_BLK","AVG_BLK","OPP_PREV_PF_B","OPP_RT3_PF_B","OPP_AVG_PF_B","OPP_PREV_STL_B","OPP_RT3_STL_B","OPP_AVG_STL_B","OPP_PREV_BLK_B","OPP_RT3_BLK_B","OPP_AVG_BLK_B","OPP_DEF_PREVRANK_B","OPP_DEF_RT3RANK_B","OPP_DEF_AVGRANK_B","MAX_FGA","MAX_FGM","MAX_FTA","MAX_FTM","MAX_FG3A","MAX_FG3M","RT3_OREB","RTZ_OREB","AVG_OREB","RT3_DREB","RTZ_DREB","AVG_DREB","RTZ_PF","RTZ_STL","RT5_FTA","RT9_FTA","RT5_FTM","RT9_FTM","RT5_FG3A","RT9_FG3A","RT5_FG3M","RT9_FG3M","RT5_FGA","RT9_FGA","RT5_FGM","RT9_FGM","RT5_PF","RT9_PF","RT5_AST"],"PREDICTION_OUTPUT_COLUMNS":["SEASON","GAME_ID","PLAYER_ID","GAME_DATE","TEAM_NAME","PLAYER_NAME","AVG_PTS","RTZ_PTS","RT3_PTS","RT5_PTS","RT9_PTS","PREV_PTS","TEAM_OUT","OPP_OUT","OPP_PLAYER_ID","OPP_PLAYER_NAME","OPP_DEF_PTS1","OPP_DEF_PTS3","OPP_DEF_PTSAVG","WEEK_PLAYTIME","OPP_WEEK_PLAYTIME","LAST_GAME_DAYS","OPP_LAST_GAME_DAYS","START_POSITION","DISTANCE","ALTITUDE","IS_HOME","OPP_DEF_PREVRANK","OPP_DEF_RT3RANK","OPP_DEF_AVGRANK","LAST_PTS"],"LEARNERRANGE_USED":[[0.8225446062076851,1.0946158947138132],[1.1871193135229328,1.4142508199747716],[1.753544882265695,2.24031725360666],[0.630196189764539,0.8779016153352786],[0.3595377413761001,0.6758220301690232],[0.23167634875153775,0.44827582301374175],[0.7425007869476503,1.2080880791530784]],"EPOCH_LEARN_STATES":[{"EPOCH":0,"LEARN_RATE":0.002102247191011236,"CURRENT_LOSS":0.0},{"EPOCH":1,"LEARN_RATE":0.002102247191011236,"CURRENT_LOSS":55.29753112792969},{"EPOCH":2,"LEARN_RATE":0.002102247191011236,"CURRENT_LOSS":49.65936279296875},{"EPOCH":3,"LEARN_RATE":0.004507822083787026,"CURRENT_LOSS":51.27875900268555},{"EPOCH":4,"LEARN_RATE":0.002236876934677818,"CURRENT_LOSS":49.4866943359375},{"EPOCH":5,"LEARN_RATE":0.0030611862428164913,"CURRENT_LOSS":50.20892333984375},{"EPOCH":6,"LEARN_RATE":0.0020352060085724187,"CURRENT_LOSS":49.387569427490234},{"EPOCH":7,"LEARN_RATE":0.0017498924423419383,"CURRENT_LOSS":49.1944580078125},{"EPOCH":8,"LEARN_RATE":0.001441374801924932,"CURRENT_LOSS":48.841209411621094},{"EPOCH":9,"LEARN_RATE":0.0013634354688635511,"CURRENT_LOSS":48.938011169433594},{"EPOCH":10,"LEARN_RATE":0.0011138724931047496,"CURRENT_LOSS":48.665863037109375},{"EPOCH":11,"LEARN_RATE":0.0009779150208812791,"CURRENT_LOSS":48.56340789794922},{"EPOCH":12,"LEARN_RATE":0.0010684941354569936,"CURRENT_LOSS":48.45851516723633},{"EPOCH":0,"LEARN_RATE":0.002102247206494212,"CURRENT_LOSS":0.0},{"EPOCH":1,"LEARN_RATE":0.002102247206494212,"CURRENT_LOSS":53.91725540161133},{"EPOCH":2,"LEARN_RATE":0.002102247206494212,"CURRENT_LOSS":49.93149185180664},{"EPOCH":3,"LEARN_RATE":0.0028128977864980698,"CURRENT_LOSS":50.19833755493164},{"EPOCH":4,"LEARN_RATE":0.0020355975721031427,"CURRENT_LOSS":49.496768951416016},{"EPOCH":5,"LEARN_RATE":0.0017400991637259722,"CURRENT_LOSS":49.242164611816406},{"EPOCH":6,"LEARN_RATE":0.0014704066561535,"CURRENT_LOSS":49.19561004638672},{"EPOCH":7,"LEARN_RATE":0.0013552510645240545,"CURRENT_LOSS":49.000118255615234},{"EPOCH":8,"LEARN_RATE":0.0012571807019412518,"CURRENT_LOSS":49.044612884521484},{"EPOCH":9,"LEARN_RATE":0.0008001168607734144,"CURRENT_LOSS":48.81338119506836},{"EPOCH":0,"LEARN_RATE":0.002102247206494212,"CURRENT_LOSS":0.0},{"EPOCH":1,"LEARN_RATE":0.002102247206494212,"CURRENT_LOSS":52.22755432128906},{"EPOCH":2,"LEARN_RATE":0.002102247206494212,"CURRENT_LOSS":47.889923095703125},{"EPOCH":3,"LEARN_RATE":0.002596133155748248,"CURRENT_LOSS":47.88255310058594},{"EPOCH":4,"LEARN_RATE":0.0028722551651299,"CURRENT_LOSS":48.09696960449219},{"EPOCH":5,"LEARN_RATE":0.0022099546622484922,"CURRENT_LOSS":47.36170959472656},{"EPOCH":6,"LEARN_RATE":0.0021111455280333757,"CURRENT_LOSS":47.30302810668945},{"EPOCH":7,"LEARN_RATE":0.0022614472545683384,"CURRENT_LOSS":47.582637786865234},{"EPOCH":8,"LEARN_RATE":0.0018276210175827146,"CURRENT_LOSS":47.156333923339844},{"EPOCH":9,"LEARN_RATE":0.0016799524892121553,"CURRENT_LOSS":47.04103088378906},{"EPOCH":10,"LEARN_RATE":0.0017242991598322988,"CURRENT_LOSS":47.10102844238281},{"EPOCH":11,"LEARN_RATE":0.0011711171828210354,"CURRENT_LOSS":46.68110656738281},{"EPOCH":12,"LEARN_RATE":0.0010082224616780877,"CURRENT_LOSS":46.60228729248047},{"EPOCH":13,"LEARN_RATE":0.0010824771597981453,"CURRENT_LOSS":46.63872528076172}],"RUN_TIME_DATE":"2024-03-19_18-01-09","TOP_PATH":"C:\\Files\\source\\current\\home\\sportsai/data/ai/top/20.66_2024-03-19_18-01-09_ALL_PTS/","EVAL_LOSS":0.0,"PRED_CORRECT_COUNT":350,"PRED_TOTAL_COUNT":1694,"PRED_PERCENTAGE":20.66115702479339}
    ,{"TARGET_COLUMN":"PTS","MAIN_FILTERS":{"POSITION":"ALL","MINAVG":9,"MAXAVG":-1},"MODEL_SHUFFLE_DATA":True,"MODEL_BATCH_SIZE":"675","MAX_CATPART":"827","MODEL_LEARNING_RATE":0.002102247191011236,"TRAIN_EPOCH_COUNT":"14","CONFIDENCE_CHECKS":"3","AI_SAVE_STATE":True,"HOME_START_AMPLIFY":[2,3],"RESET_STATE_ON_NEWRUN":True,"TRAIN_START_YEAR":2007,"VALID_START_YEAR":2020,"TEST_START_YEAR":2022,"PRED_START_DATE":"2024-11-01","MODEL_LAYERS":{"LAYER_1":{"ACTIVATION":"softplus","UNITS":1031,"DROPOUT":0.04},"LAYER_2":{"ACTIVATION":"relu","UNITS":928,"DROPOUT":0.3},"LAYER_3":{"ACTIVATION":"relu","UNITS":1,"DROPOUT":-1}},"CATEGORY_COLUMNS":["PLAYER_ID","TEAM_NAME","OPP_NAME","START_POSITION","OFFICIAL2","POSITION","GAME_DAY","AGE","HEIGHT","WEIGHT","SCHOOL","COUNTRY","OPP_PLAYER_ID"],"FEATURE_COLUMNS":["YEARS_IN_TEAM","IS_STARTING","OPP_DISTANCE","LAST_GAME_DAYS","TWIN","GAMES_IN","GAMES_CONT","GAMES_START","GAMES_BENCH","AVG_MIN","RT3_MIN","RT5_MIN","RT9_MIN","AVG_PTS","RT5_PTS","RT9_PTS","RT3_REB","AVG_AST","RT3_AST","RT3_FGM","RT3_FGA","AVG_FG3M","AVG_FG3A","RT3_FG3A","AVG_FTA","RT3_FTA","RTZ_MIN","RTZ_REB","RTZ_AST","RTZ_FGM","RTZ_FGA","RTZ_FG3M","RTZ_FTA","PREV_PTS","PREV_AST","PREV_REB","PREV_MIN","PREV_FGA","PREV_FTA","PREV_FTM","PREV_FG3A","PREV_FG3M","LOSSES_B","DISTANCE_B","OPP_WINS_B","TLOSS_B","OWIN_B","DAYS_OUT_B","BACKTOBACKGAME_B","ALTITUDE_B","OPP_LAST_GAME_DAYS_B","OPP_WEEK_PLAYTIME","OPP_DEF_PTS1","OPP_DEF_PTS3","OPP_DEF_PTS9","OPP_DEF_PTSAVG","OPP_DEF_REB1","OPP_DEF_REB3","OPP_DEF_REBAVG","OPP_DEF_AST1","OPP_DEF_AST3","OPP_DEF_ASTAVG","TEAM_OUT","OPP_OUT","MAX_PTS","MAX_AST","MAX_REB","MAX_MIN","RT3_PF","AVG_PF","PREV_STL","RT3_STL","AVG_STL","PREV_BLK","AVG_BLK","OPP_PREV_PF_B","OPP_RT3_PF_B","OPP_AVG_PF_B","OPP_PREV_STL_B","OPP_RT3_STL_B","OPP_AVG_STL_B","OPP_PREV_BLK_B","OPP_RT3_BLK_B","OPP_AVG_BLK_B","OPP_DEF_PREVRANK_B","OPP_DEF_RT3RANK_B","OPP_DEF_AVGRANK_B","MAX_FGA","MAX_FGM","MAX_FTA","MAX_FTM","MAX_FG3A","MAX_FG3M","RT3_OREB","RTZ_OREB","AVG_OREB","RT3_DREB","RTZ_DREB","AVG_DREB","RTZ_PF","RTZ_STL","RT5_FTA","RT9_FTA","RT5_FTM","RT9_FTM","RT5_FG3A","RT9_FG3A","RT5_FG3M","RT9_FG3M","RT5_FGA","RT9_FGA","RT5_FGM","RT9_FGM","RT5_PF","RT9_PF","RT5_AST"],"PREDICTION_OUTPUT_COLUMNS":["SEASON","GAME_ID","PLAYER_ID","GAME_DATE","TEAM_NAME","PLAYER_NAME","AVG_PTS","RTZ_PTS","RT3_PTS","RT5_PTS","RT9_PTS","PREV_PTS","TEAM_OUT","OPP_OUT","OPP_PLAYER_ID","OPP_PLAYER_NAME","OPP_DEF_PTS1","OPP_DEF_PTS3","OPP_DEF_PTSAVG","WEEK_PLAYTIME","OPP_WEEK_PLAYTIME","LAST_GAME_DAYS","OPP_LAST_GAME_DAYS","START_POSITION","DISTANCE","ALTITUDE","IS_HOME","OPP_DEF_PREVRANK","OPP_DEF_RT3RANK","OPP_DEF_AVGRANK","LAST_PTS"],"LEARNERRANGE_USED":[[0.8225446062076851,1.0946158947138132],[1.1871193135229328,1.4142508199747716],[1.753544882265695,2.24031725360666],[0.630196189764539,0.8779016153352786],[0.3595377413761001,0.6758220301690232],[0.23167634875153775,0.44827582301374175],[0.7425007869476503,1.2080880791530784]],"EPOCH_LEARN_STATES":[{"EPOCH":0,"LEARN_RATE":0.002102247191011236,"CURRENT_LOSS":0.0},{"EPOCH":1,"LEARN_RATE":0.002102247191011236,"CURRENT_LOSS":55.29753112792969},{"EPOCH":2,"LEARN_RATE":0.002102247191011236,"CURRENT_LOSS":49.65936279296875},{"EPOCH":3,"LEARN_RATE":0.004507822083787026,"CURRENT_LOSS":51.27875900268555},{"EPOCH":4,"LEARN_RATE":0.002236876934677818,"CURRENT_LOSS":49.4866943359375},{"EPOCH":5,"LEARN_RATE":0.0030611862428164913,"CURRENT_LOSS":50.20892333984375},{"EPOCH":6,"LEARN_RATE":0.0020352060085724187,"CURRENT_LOSS":49.387569427490234},{"EPOCH":7,"LEARN_RATE":0.0017498924423419383,"CURRENT_LOSS":49.1944580078125},{"EPOCH":8,"LEARN_RATE":0.001441374801924932,"CURRENT_LOSS":48.841209411621094},{"EPOCH":9,"LEARN_RATE":0.0013634354688635511,"CURRENT_LOSS":48.938011169433594},{"EPOCH":10,"LEARN_RATE":0.0011138724931047496,"CURRENT_LOSS":48.665863037109375},{"EPOCH":11,"LEARN_RATE":0.0009779150208812791,"CURRENT_LOSS":48.56340789794922},{"EPOCH":12,"LEARN_RATE":0.0010684941354569936,"CURRENT_LOSS":48.45851516723633},{"EPOCH":0,"LEARN_RATE":0.002102247206494212,"CURRENT_LOSS":0.0},{"EPOCH":1,"LEARN_RATE":0.002102247206494212,"CURRENT_LOSS":53.91725540161133},{"EPOCH":2,"LEARN_RATE":0.002102247206494212,"CURRENT_LOSS":49.93149185180664},{"EPOCH":3,"LEARN_RATE":0.0028128977864980698,"CURRENT_LOSS":50.19833755493164},{"EPOCH":4,"LEARN_RATE":0.0020355975721031427,"CURRENT_LOSS":49.496768951416016},{"EPOCH":5,"LEARN_RATE":0.0017400991637259722,"CURRENT_LOSS":49.242164611816406},{"EPOCH":6,"LEARN_RATE":0.0014704066561535,"CURRENT_LOSS":49.19561004638672},{"EPOCH":7,"LEARN_RATE":0.0013552510645240545,"CURRENT_LOSS":49.000118255615234},{"EPOCH":8,"LEARN_RATE":0.0012571807019412518,"CURRENT_LOSS":49.044612884521484},{"EPOCH":9,"LEARN_RATE":0.0008001168607734144,"CURRENT_LOSS":48.81338119506836},{"EPOCH":0,"LEARN_RATE":0.002102247206494212,"CURRENT_LOSS":0.0},{"EPOCH":1,"LEARN_RATE":0.002102247206494212,"CURRENT_LOSS":47.13425827026367},{"EPOCH":2,"LEARN_RATE":0.002102247206494212,"CURRENT_LOSS":44.34446334838867},{"EPOCH":3,"LEARN_RATE":0.0028905493672937155,"CURRENT_LOSS":44.57268142700195},{"EPOCH":4,"LEARN_RATE":0.0023231490049511194,"CURRENT_LOSS":43.99671936035156},{"EPOCH":5,"LEARN_RATE":0.002404412254691124,"CURRENT_LOSS":44.090309143066406},{"EPOCH":6,"LEARN_RATE":0.0019311432261019945,"CURRENT_LOSS":43.85497283935547},{"EPOCH":7,"LEARN_RATE":0.0016686141025274992,"CURRENT_LOSS":43.576622009277344},{"EPOCH":8,"LEARN_RATE":0.0017216550186276436,"CURRENT_LOSS":43.71002197265625},{"EPOCH":9,"LEARN_RATE":0.0014720299514010549,"CURRENT_LOSS":43.65079879760742},{"EPOCH":10,"LEARN_RATE":0.0012734105112031102,"CURRENT_LOSS":43.26308822631836},{"EPOCH":11,"LEARN_RATE":0.001354368170723319,"CURRENT_LOSS":43.223304748535156},{"EPOCH":12,"LEARN_RATE":0.001349480589851737,"CURRENT_LOSS":43.125492095947266},{"EPOCH":13,"LEARN_RATE":0.0012722769752144814,"CURRENT_LOSS":43.15782928466797}],"RUN_TIME_DATE":"2024-03-19_17-53-44","TOP_PATH":"C:\\Files\\source\\current\\home\\sportsai/data/ai/top/20.07_2024-03-19_17-53-44_ALL_PTS/","EVAL_LOSS":0.0,"PRED_CORRECT_COUNT":426,"PRED_TOTAL_COUNT":2123,"PRED_PERCENTAGE":20.065944418276025}
    ,{"TARGET_COLUMN":"PTS","MAIN_FILTERS":{"POSITION":"ALL","MINAVG":9,"MAXAVG":-1},"MODEL_SHUFFLE_DATA":False,"MODEL_BATCH_SIZE":"462","MAX_CATPART":"153","MODEL_LEARNING_RATE":0.0001,"TRAIN_EPOCH_COUNT":"22","CONFIDENCE_CHECKS":"4","AI_SAVE_STATE":True,"HOME_START_AMPLIFY":[8,7],"RESET_STATE_ON_NEWRUN":True,"TRAIN_START_YEAR":2005,"VALID_START_YEAR":2021,"TEST_START_YEAR":2022,"PRED_START_DATE":"2024-11-01","MODEL_LAYERS":{"LAYER_1":{"ACTIVATION":"relu","UNITS":1499,"DROPOUT":0.2},"LAYER_2":{"ACTIVATION":"relu","UNITS":794,"DROPOUT":0.49},"LAYER_3":{"ACTIVATION":"relu","UNITS":1,"DROPOUT":-1}},"CATEGORY_COLUMNS":["PLAYER_ID","TEAM_NAME","START_POSITION","OFFICIAL2","POSITION","GAME_DAY","AGE","WEIGHT","SCHOOL","COUNTRY","OPP_PLAYER_ID","SEASON"],"FEATURE_COLUMNS":["IS_HOME","YEARS_IN_TEAM","IS_STARTING","OPP_DISTANCE","LAST_GAME_DAYS","OLOSS","GAMES_CONT","GAMES_START","GAMES_BENCH","RT3_MIN","RT5_MIN","RT9_MIN","AVG_PTS","RT9_PTS","AVG_REB","RT3_REB","RT3_AST","AVG_FGM","RT3_FGM","RT3_FGA","RT3_FG3M","RT3_FG3A","AVG_FTM","AVG_FTA","RT3_FTA","RTZ_MIN","RTZ_PTS","RTZ_REB","RTZ_AST","RTZ_FGM","RTZ_FGA","RTZ_FG3M","RTZ_FG3A","RTZ_FTM","RTZ_FTA","PREV_PTS","PREV_AST","PREV_REB","PREV_MIN","PREV_FGA","PREV_FGM","PREV_FTA","PREV_FTM","PREV_FG3A","PREV_FG3M","LOSSES_B","DISTANCE_B","GAMES_OUT_B","TLOSS_B","OWIN_B","DAYS_OUT_B","WEEK_PLAYTIME_B","ALTITUDE_B","OPP_LAST_GAME_DAYS_B","OPP_BACKTOBACKGAME","OPP_WEEK_PLAYTIME","OPP_DEF_PTS1","OPP_DEF_PTS3","OPP_DEF_PTS5","OPP_DEF_PTSAVG","OPP_DEF_REB1","OPP_DEF_REB3","OPP_DEF_AST1","OPP_DEF_AST3","OPP_DEF_ASTAVG","TEAM_OUT","OPP_OUT","MAX_PTS","MAX_AST","MAX_REB","MAX_MIN","AVG_PF","RT3_STL","AVG_STL","PREV_BLK","RT3_BLK","AVG_BLK","OPP_PREV_PF_B","OPP_AVG_PF_B","OPP_PREV_STL_B","OPP_RT3_STL_B","OPP_AVG_STL_B","OPP_AVG_BLK_B","OPP_DEF_PREVRANK_B","OPP_DEF_RT3RANK_B","OPP_DEF_AVGRANK_B","MAX_FGA","MAX_FGM","MAX_FTA","MAX_FTM","MAX_FG3A","MAX_FG3M","RT3_OREB","RTZ_OREB","AVG_OREB","RT3_DREB","RTZ_DREB","AVG_DREB","RTZ_PF","RTZ_STL","RTZ_BLK","RT5_FTA","RT9_FTA","RT5_FTM","RT9_FTM","RT5_FG3A","RT9_FG3A","RT5_FG3M","RT9_FG3M","RT5_FGA","RT9_FGA","RT5_FGM","RT9_FGM","RT9_PF","RT5_AST","RT5_REB"],"PREDICTION_OUTPUT_COLUMNS":["SEASON","GAME_ID","PLAYER_ID","GAME_DATE","TEAM_NAME","PLAYER_NAME","AVG_PTS","RTZ_PTS","RT3_PTS","RT5_PTS","RT9_PTS","PREV_PTS","TEAM_OUT","OPP_OUT","OPP_PLAYER_ID","OPP_PLAYER_NAME","OPP_DEF_PTS1","OPP_DEF_PTS3","OPP_DEF_PTSAVG","WEEK_PLAYTIME","OPP_WEEK_PLAYTIME","LAST_GAME_DAYS","OPP_LAST_GAME_DAYS","START_POSITION","DISTANCE","ALTITUDE","IS_HOME","OPP_DEF_PREVRANK","OPP_DEF_RT3RANK","OPP_DEF_AVGRANK","LAST_PTS"],"LEARNERRANGE_USED":[[0.8732148272461385,1.1985050742628736],[1.2769604113993942,1.561516751818503],[1.8106277837589935,2.1763233734759355],[0.6407119951010938,0.869742092894692],[0.5388015104534715,0.668161008571947],[0.29963467243087477,0.4625817712866743],[0.7771259677674539,1.2280404355522967]],"EPOCH_LEARN_STATES":[{"EPOCH":0,"LEARN_RATE":0.0001,"CURRENT_LOSS":0.0},{"EPOCH":1,"LEARN_RATE":0.0001,"CURRENT_LOSS":82.06503295898438},{"EPOCH":2,"LEARN_RATE":0.0001,"CURRENT_LOSS":53.26078414916992},{"EPOCH":3,"LEARN_RATE":0.00020283058901283534,"CURRENT_LOSS":52.7872314453125},{"EPOCH":4,"LEARN_RATE":0.0002200035701984702,"CURRENT_LOSS":52.53438949584961},{"EPOCH":5,"LEARN_RATE":0.00023223055192902344,"CURRENT_LOSS":52.64951705932617},{"EPOCH":6,"LEARN_RATE":0.0001827445535506266,"CURRENT_LOSS":51.70900344848633},{"EPOCH":7,"LEARN_RATE":0.0001860984363387262,"CURRENT_LOSS":51.58851623535156},{"EPOCH":8,"LEARN_RATE":0.00021647287501592966,"CURRENT_LOSS":51.59293746948242},{"EPOCH":9,"LEARN_RATE":0.00020562093348485566,"CURRENT_LOSS":51.69764709472656},{"EPOCH":10,"LEARN_RATE":0.00017593995175523128,"CURRENT_LOSS":51.33467102050781},{"EPOCH":0,"LEARN_RATE":9.999999747378752e-05,"CURRENT_LOSS":0.0},{"EPOCH":1,"LEARN_RATE":9.999999747378752e-05,"CURRENT_LOSS":80.22447204589844},{"EPOCH":2,"LEARN_RATE":9.999999747378752e-05,"CURRENT_LOSS":53.13869094848633},{"EPOCH":3,"LEARN_RATE":0.00021186219237279147,"CURRENT_LOSS":52.77824020385742},{"EPOCH":4,"LEARN_RATE":0.00021023530280217528,"CURRENT_LOSS":52.36281967163086},{"EPOCH":5,"LEARN_RATE":0.00019738530681934208,"CURRENT_LOSS":51.856937408447266},{"EPOCH":6,"LEARN_RATE":0.0002157624694518745,"CURRENT_LOSS":52.014617919921875},{"EPOCH":7,"LEARN_RATE":0.00014621867740061134,"CURRENT_LOSS":51.612815856933594},{"EPOCH":8,"LEARN_RATE":0.00013340146688278764,"CURRENT_LOSS":51.206268310546875},{"EPOCH":9,"LEARN_RATE":0.00015486300981137902,"CURRENT_LOSS":51.238365173339844},{"EPOCH":10,"LEARN_RATE":0.00011746872769435868,"CURRENT_LOSS":51.13994598388672},{"EPOCH":11,"LEARN_RATE":0.00013501748617272824,"CURRENT_LOSS":50.9933967590332},{"EPOCH":12,"LEARN_RATE":0.00012737410725094378,"CURRENT_LOSS":50.92128372192383},{"EPOCH":13,"LEARN_RATE":0.00014448189176619053,"CURRENT_LOSS":50.98763656616211}],"RUN_TIME_DATE":"2024-03-19_17-35-12","TOP_PATH":"C:\\Files\\source\\current\\home\\sportsai/data/ai/top/21.99_2024-03-19_17-35-12_ALL_PTS/","EVAL_LOSS":0.0,"PRED_CORRECT_COUNT":274,"PRED_TOTAL_COUNT":1246,"PRED_PERCENTAGE":21.990369181380416}
    ,{"TARGET_COLUMN":"AST","MAIN_FILTERS":{"POSITION":"ALL","MINAVG":2,"MAXAVG":12},"MODEL_SHUFFLE_DATA":True,"MODEL_BATCH_SIZE":"378","MAX_CATPART":"529","MODEL_LEARNING_RATE":0.0001,"TRAIN_EPOCH_COUNT":"25","CONFIDENCE_CHECKS":"4","AI_SAVE_STATE":True,"HOME_START_AMPLIFY":[2,8],"RESET_STATE_ON_NEWRUN":True,"TRAIN_START_YEAR":2006,"VALID_START_YEAR":2021,"TEST_START_YEAR":2023,"PRED_START_DATE":"2024-11-01","MODEL_LAYERS":{"LAYER_1":{"ACTIVATION":"linear","UNITS":1179,"DROPOUT":0.2},"LAYER_2":{"ACTIVATION":"relu","UNITS":965,"DROPOUT":0.11},"LAYER_3":{"ACTIVATION":"relu","UNITS":1,"DROPOUT":-1}},"CATEGORY_COLUMNS":["PLAYER_ID","OPP_NAME","START_POSITION","OFFICIAL1","OFFICIAL2","POSITION","GAME_DAY","WEIGHT","SCHOOL","COUNTRY"],"FEATURE_COLUMNS":["IS_HOME","YEARS_IN_TEAM","LAST_GAME_DAYS","TWIN","OLOSS","GAMES_CONT","GAMES_START","GAMES_BENCH","AVG_MIN","RT3_MIN","RT5_MIN","RT9_MIN","AVG_PTS","RT3_PTS","RT5_PTS","RT9_PTS","AVG_REB","AVG_AST","AVG_FGM","AVG_FGA","RT3_FGA","AVG_FG3M","RT3_FG3M","AVG_FG3A","RT3_FG3A","AVG_FTM","RT3_FTM","AVG_FTA","RT3_FTA","RTZ_MIN","RTZ_PTS","RTZ_REB","RTZ_AST","RTZ_FGM","RTZ_FGA","RTZ_FG3M","RTZ_FTM","PREV_PTS","PREV_AST","PREV_REB","PREV_MIN","PREV_FGA","PREV_FGM","PREV_FTM","PREV_FG3A","PREV_FG3M","LOSSES_B","DISTANCE_B","GAMES_OUT_B","OPP_WINS_B","OWIN_B","DAYS_OUT_B","BACKTOBACKGAME_B","ALTITUDE_B","OPP_LAST_GAME_DAYS_B","OPP_BACKTOBACKGAME","OPP_WEEK_PLAYTIME","OPP_DEF_PTS1","OPP_DEF_PTS5","OPP_DEF_PTS9","OPP_DEF_PTSAVG","OPP_DEF_REB1","OPP_DEF_REB3","OPP_DEF_REBAVG","OPP_DEF_AST1","OPP_DEF_AST3","OPP_DEF_ASTAVG","TEAM_OUT","OPP_OUT","MAX_PTS","MAX_AST","MAX_MIN","PREV_PF","RT3_PF","AVG_PF","PREV_STL","RT3_STL","AVG_STL","PREV_BLK","OPP_PREV_PF_B","OPP_RT3_PF_B","OPP_AVG_PF_B","OPP_PREV_STL_B","OPP_RT3_STL_B","OPP_AVG_STL_B","OPP_PREV_BLK_B","OPP_RT3_BLK_B","OPP_DEF_PREVRANK_B","OPP_DEF_RT3RANK_B","OPP_DEF_AVGRANK_B","MAX_FGM","MAX_FG3A","MAX_FG3M","RTZ_OREB","AVG_OREB","RT3_DREB","RTZ_DREB","AVG_DREB","RTZ_PF","RTZ_BLK","RT5_FTA","RT9_FTA","RT5_FTM","RT9_FTM","RT5_FG3A","RT9_FG3A","RT5_FG3M","RT9_FG3M","RT5_FGA","RT5_FGM","RT5_PF","RT9_PF","RT5_AST","RT5_REB"],"PREDICTION_OUTPUT_COLUMNS":["SEASON","GAME_ID","PLAYER_ID","GAME_DATE","TEAM_NAME","PLAYER_NAME","AVG_AST","RTZ_AST","RT3_AST","RT5_AST","RT9_AST","PREV_AST","TEAM_OUT","OPP_OUT","OPP_PLAYER_ID","OPP_PLAYER_NAME","OPP_DEF_AST1","OPP_DEF_AST3","OPP_DEF_ASTAVG","WEEK_PLAYTIME","OPP_WEEK_PLAYTIME","LAST_GAME_DAYS","OPP_LAST_GAME_DAYS","START_POSITION","DISTANCE","ALTITUDE","IS_HOME","OPP_DEF_PREVRANK","OPP_DEF_RT3RANK","OPP_DEF_AVGRANK","LAST_AST"],"LEARNERRANGE_USED":[[0.7648609571416675,1.1209823587419219],[1.1206366534406058,1.5380778530617585],[1.8337194129324657,2.3324948053072605],[0.6209520249752123,0.8870750251155316],[0.3994323832318382,0.6308013707026167],[0.2655288804648404,0.4913258803240088],[0.7799399200130235,1.2661111826739657]],"EPOCH_LEARN_STATES":[{"EPOCH":0,"LEARN_RATE":0.0001,"CURRENT_LOSS":0.0},{"EPOCH":1,"LEARN_RATE":0.0001,"CURRENT_LOSS":4.803092956542969},{"EPOCH":2,"LEARN_RATE":0.0001,"CURRENT_LOSS":4.1463494300842285},{"EPOCH":3,"LEARN_RATE":7.874469194505735e-05,"CURRENT_LOSS":4.108484745025635},{"EPOCH":4,"LEARN_RATE":6.443842937812081e-05,"CURRENT_LOSS":4.0875244140625},{"EPOCH":5,"LEARN_RATE":6.109910836470667e-05,"CURRENT_LOSS":4.079763889312744},{"EPOCH":6,"LEARN_RATE":7.281858750835213e-05,"CURRENT_LOSS":4.064194679260254},{"EPOCH":7,"LEARN_RATE":5.5908486993706247e-05,"CURRENT_LOSS":4.051738262176514},{"EPOCH":8,"LEARN_RATE":5.004373249920025e-05,"CURRENT_LOSS":4.0371527671813965},{"EPOCH":9,"LEARN_RATE":5.582366900224105e-05,"CURRENT_LOSS":4.029540538787842},{"EPOCH":0,"LEARN_RATE":9.999999747378752e-05,"CURRENT_LOSS":0.0},{"EPOCH":1,"LEARN_RATE":9.999999747378752e-05,"CURRENT_LOSS":5.788930892944336},{"EPOCH":2,"LEARN_RATE":9.999999747378752e-05,"CURRENT_LOSS":5.285519123077393},{"EPOCH":3,"LEARN_RATE":0.00010327740164939314,"CURRENT_LOSS":5.254261016845703},{"EPOCH":4,"LEARN_RATE":0.00011028498556697741,"CURRENT_LOSS":5.244029998779297},{"EPOCH":5,"LEARN_RATE":0.00012003269512206316,"CURRENT_LOSS":5.216131210327148},{"EPOCH":6,"LEARN_RATE":0.0001274528622161597,"CURRENT_LOSS":5.206784248352051},{"EPOCH":7,"LEARN_RATE":0.00010911084245890379,"CURRENT_LOSS":5.1843061447143555},{"EPOCH":8,"LEARN_RATE":8.76377453096211e-05,"CURRENT_LOSS":5.15824031829834},{"EPOCH":9,"LEARN_RATE":7.06083737895824e-05,"CURRENT_LOSS":5.142078399658203}],"RUN_TIME_DATE":"2024-03-19_17-16-55","TOP_PATH":"C:\\Files\\source\\current\\home\\sportsai/data/ai/top/32.04_2024-03-19_17-16-55_ALL_AST/","EVAL_LOSS":0.0,"PRED_CORRECT_COUNT":628,"PRED_TOTAL_COUNT":1960,"PRED_PERCENTAGE":32.04081632653061}
    ,{"TARGET_COLUMN":"REB","MAIN_FILTERS":{"POSITION":"ALL","MINAVG":2,"MAXAVG":-1},"MODEL_SHUFFLE_DATA":False,"MODEL_BATCH_SIZE":"848","MAX_CATPART":"287","MODEL_LEARNING_RATE":0.0022134831460674156,"TRAIN_EPOCH_COUNT":"25","CONFIDENCE_CHECKS":"4","AI_SAVE_STATE":True,"HOME_START_AMPLIFY":[1,1],"RESET_STATE_ON_NEWRUN":True,"TRAIN_START_YEAR":2005,"VALID_START_YEAR":2021,"TEST_START_YEAR":2023,"PRED_START_DATE":"2024-11-01","MODEL_LAYERS":{"LAYER_1":{"ACTIVATION":"relu","UNITS":533,"DROPOUT":0.01},"LAYER_2":{"ACTIVATION":"selu","UNITS":51,"DROPOUT":0.17},"LAYER_3":{"ACTIVATION":"relu","UNITS":1,"DROPOUT":-1}},"CATEGORY_COLUMNS":["PLAYER_ID","OFFICIAL1","POSITION","GAME_DAY","AGE","WEIGHT","COUNTRY","SEASON"],"FEATURE_COLUMNS":["IS_HOME","YEARS_IN_TEAM","OPP_DISTANCE","LAST_GAME_DAYS","OLOSS","GAMES_IN","GAMES_START","GAMES_BENCH","AVG_MIN","RT3_MIN","RT5_MIN","RT9_MIN","AVG_PTS","RT3_PTS","RT5_PTS","RT9_PTS","AVG_REB","AVG_AST","RT3_AST","AVG_FGM","RT3_FGM","AVG_FGA","RT3_FGA","AVG_FG3M","RT3_FG3M","AVG_FG3A","RT3_FG3A","AVG_FTM","RT3_FTM","AVG_FTA","RT3_FTA","RTZ_MIN","RTZ_PTS","RTZ_REB","RTZ_AST","RTZ_FGM","RTZ_FGA","RTZ_FG3M","RTZ_FG3A","RTZ_FTM","RTZ_FTA","PREV_AST","PREV_REB","PREV_FGA","PREV_FGM","PREV_FTA","PREV_FTM","PREV_FG3A","PREV_FG3M","LOSSES_B","DISTANCE_B","GAMES_OUT_B","OPP_WINS_B","TLOSS_B","OWIN_B","DAYS_OUT_B","BACKTOBACKGAME_B","WEEK_PLAYTIME_B","OPP_LAST_GAME_DAYS_B","OPP_DEF_PTS1","OPP_DEF_PTS3","OPP_DEF_PTS5","OPP_DEF_PTS9","OPP_DEF_REB1","OPP_DEF_REB3","OPP_DEF_AST1","OPP_DEF_AST3","OPP_DEF_ASTAVG","TEAM_OUT","OPP_OUT","MAX_PTS","MAX_AST","MAX_REB","MAX_MIN","PREV_PF","RT3_PF","PREV_STL","RT3_STL","AVG_STL","PREV_BLK","RT3_BLK","AVG_BLK","OPP_PREV_PF_B","OPP_RT3_PF_B","OPP_AVG_PF_B","OPP_PREV_STL_B","OPP_RT3_STL_B","OPP_AVG_STL_B","OPP_PREV_BLK_B","OPP_RT3_BLK_B","OPP_AVG_BLK_B","OPP_DEF_PREVRANK_B","OPP_DEF_RT3RANK_B","OPP_DEF_AVGRANK_B","MAX_FGA","MAX_FGM","MAX_FTA","RT3_OREB","RTZ_OREB","RT3_DREB","RTZ_DREB","AVG_DREB","RTZ_PF","RTZ_STL","RT5_FTA","RT9_FTA","RT5_FTM","RT9_FTM","RT5_FG3A","RT9_FG3A","RT5_FG3M","RT5_FGA","RT9_FGA","RT5_FGM","RT9_FGM","RT5_PF","RT9_PF","RT5_AST","RT5_REB"],"PREDICTION_OUTPUT_COLUMNS":["SEASON","GAME_ID","PLAYER_ID","GAME_DATE","TEAM_NAME","PLAYER_NAME","AVG_REB","RTZ_REB","RT3_REB","RT5_REB","RT9_REB","PREV_REB","TEAM_OUT","OPP_OUT","OPP_PLAYER_ID","OPP_PLAYER_NAME","OPP_DEF_REB1","OPP_DEF_REB3","OPP_DEF_REBAVG","WEEK_PLAYTIME","OPP_WEEK_PLAYTIME","LAST_GAME_DAYS","OPP_LAST_GAME_DAYS","START_POSITION","DISTANCE","ALTITUDE","IS_HOME","OPP_DEF_PREVRANK","OPP_DEF_RT3RANK","OPP_DEF_AVGRANK","LAST_REB"],"LEARNERRANGE_USED":[[0.7861735191799937,1.1421758449415065],[1.1484087916131134,1.5665627078518924],[1.7697494501141455,2.2017075296620834],[0.6133382438295916,0.8873608672277292],[0.4424733386280775,0.6077879365480289],[0.26912548647802326,0.36327192333007613],[0.7728174829092688,1.2664706622900352]],"EPOCH_LEARN_STATES":[{"EPOCH":0,"LEARN_RATE":0.0022134831460674156,"CURRENT_LOSS":0.0},{"EPOCH":1,"LEARN_RATE":0.0022134831460674156,"CURRENT_LOSS":7.741110324859619},{"EPOCH":2,"LEARN_RATE":0.0022134831460674156,"CURRENT_LOSS":7.4356255531311035},{"EPOCH":3,"LEARN_RATE":0.0018385934798389725,"CURRENT_LOSS":7.36919641494751},{"EPOCH":4,"LEARN_RATE":0.001933397779591401,"CURRENT_LOSS":7.367977619171143},{"EPOCH":5,"LEARN_RATE":0.0022049880917338486,"CURRENT_LOSS":7.337474346160889},{"EPOCH":6,"LEARN_RATE":0.0022190445701810026,"CURRENT_LOSS":7.306307315826416},{"EPOCH":7,"LEARN_RATE":0.0022501483436453127,"CURRENT_LOSS":7.297043323516846},{"EPOCH":8,"LEARN_RATE":0.0018448383556702555,"CURRENT_LOSS":7.263738632202148},{"EPOCH":9,"LEARN_RATE":0.0017623272522863055,"CURRENT_LOSS":7.240722179412842},{"EPOCH":0,"LEARN_RATE":0.0022134832106530666,"CURRENT_LOSS":0.0},{"EPOCH":1,"LEARN_RATE":0.0022134832106530666,"CURRENT_LOSS":7.755557537078857},{"EPOCH":2,"LEARN_RATE":0.0022134832106530666,"CURRENT_LOSS":7.427091598510742},{"EPOCH":3,"LEARN_RATE":0.0023895991034805775,"CURRENT_LOSS":7.410139560699463},{"EPOCH":4,"LEARN_RATE":0.0021647452376782894,"CURRENT_LOSS":7.342571258544922},{"EPOCH":5,"LEARN_RATE":0.0024012282956391573,"CURRENT_LOSS":7.334242343902588},{"EPOCH":6,"LEARN_RATE":0.002216971479356289,"CURRENT_LOSS":7.2952070236206055},{"EPOCH":7,"LEARN_RATE":0.0022425344213843346,"CURRENT_LOSS":7.285876750946045},{"EPOCH":8,"LEARN_RATE":0.0024157839361578226,"CURRENT_LOSS":7.266308784484863},{"EPOCH":9,"LEARN_RATE":0.0026853906456381083,"CURRENT_LOSS":7.272994518280029}],"RUN_TIME_DATE":"2024-03-25_17-49-52","TOP_PATH":"C:\\Files\\source\\current\\home\\sportsai/data/ai/top/30.86_2024-03-25_17-49-52_ALL_REB/","EVAL_LOSS":0.0,"PRED_CORRECT_COUNT":1338,"PRED_TOTAL_COUNT":4336,"PRED_PERCENTAGE":30.857933579335793}
    ,{"TARGET_COLUMN":"PTS","MAIN_FILTERS":{"POSITION":"ALL","MINAVG":13,"MAXAVG":-1},"MODEL_SHUFFLE_DATA":False,"MODEL_BATCH_SIZE":"462","MAX_CATPART":"153","MODEL_LEARNING_RATE":0.0001,"TRAIN_EPOCH_COUNT":"25","CONFIDENCE_CHECKS":"4","AI_SAVE_STATE":True,"HOME_START_AMPLIFY":[8,7],"RESET_STATE_ON_NEWRUN":True,"TRAIN_START_YEAR":2005,"VALID_START_YEAR":2021,"TEST_START_YEAR":2022,"PRED_START_DATE":"2024-11-01","MODEL_LAYERS":{"LAYER_1":{"ACTIVATION":"relu","UNITS":1499,"DROPOUT":0.2},"LAYER_2":{"ACTIVATION":"relu","UNITS":794,"DROPOUT":0.49},"LAYER_3":{"ACTIVATION":"relu","UNITS":1,"DROPOUT":-1}},"CATEGORY_COLUMNS":["PLAYER_ID","TEAM_NAME","START_POSITION","OFFICIAL2","POSITION","GAME_DAY","AGE","WEIGHT","SCHOOL","COUNTRY","OPP_PLAYER_ID","SEASON"],"FEATURE_COLUMNS":["IS_HOME","YEARS_IN_TEAM","IS_STARTING","OPP_DISTANCE","LAST_GAME_DAYS","OLOSS","GAMES_CONT","GAMES_START","GAMES_BENCH","RT3_MIN","RT5_MIN","RT9_MIN","AVG_PTS","RT9_PTS","AVG_REB","RT3_REB","RT3_AST","AVG_FGM","RT3_FGM","RT3_FGA","RT3_FG3M","RT3_FG3A","AVG_FTM","AVG_FTA","RT3_FTA","RTZ_MIN","RTZ_PTS","RTZ_REB","RTZ_AST","RTZ_FGM","RTZ_FGA","RTZ_FG3M","RTZ_FG3A","RTZ_FTM","RTZ_FTA","PREV_PTS","PREV_AST","PREV_REB","PREV_MIN","PREV_FGA","PREV_FGM","PREV_FTA","PREV_FTM","PREV_FG3A","PREV_FG3M","LOSSES_B","DISTANCE_B","GAMES_OUT_B","TLOSS_B","OWIN_B","DAYS_OUT_B","WEEK_PLAYTIME_B","ALTITUDE_B","OPP_LAST_GAME_DAYS_B","OPP_BACKTOBACKGAME","OPP_WEEK_PLAYTIME","OPP_DEF_PTS1","OPP_DEF_PTS3","OPP_DEF_PTS5","OPP_DEF_PTSAVG","OPP_DEF_REB1","OPP_DEF_REB3","OPP_DEF_AST1","OPP_DEF_AST3","OPP_DEF_ASTAVG","TEAM_OUT","OPP_OUT","MAX_PTS","MAX_AST","MAX_REB","MAX_MIN","AVG_PF","RT3_STL","AVG_STL","PREV_BLK","RT3_BLK","AVG_BLK","OPP_PREV_PF_B","OPP_AVG_PF_B","OPP_PREV_STL_B","OPP_RT3_STL_B","OPP_AVG_STL_B","OPP_AVG_BLK_B","OPP_DEF_PREVRANK_B","OPP_DEF_RT3RANK_B","OPP_DEF_AVGRANK_B","MAX_FGA","MAX_FGM","MAX_FTA","MAX_FTM","MAX_FG3A","MAX_FG3M","RT3_OREB","RTZ_OREB","AVG_OREB","RT3_DREB","RTZ_DREB","AVG_DREB","RTZ_PF","RTZ_STL","RTZ_BLK","RT5_FTA","RT9_FTA","RT5_FTM","RT9_FTM","RT5_FG3A","RT9_FG3A","RT5_FG3M","RT9_FG3M","RT5_FGA","RT9_FGA","RT5_FGM","RT9_FGM","RT9_PF","RT5_AST","RT5_REB"],"PREDICTION_OUTPUT_COLUMNS":["SEASON","GAME_ID","PLAYER_ID","GAME_DATE","TEAM_NAME","PLAYER_NAME","AVG_PTS","RTZ_PTS","RT3_PTS","RT5_PTS","RT9_PTS","PREV_PTS","TEAM_OUT","OPP_OUT","OPP_PLAYER_ID","OPP_PLAYER_NAME","OPP_DEF_PTS1","OPP_DEF_PTS3","OPP_DEF_PTSAVG","WEEK_PLAYTIME","OPP_WEEK_PLAYTIME","LAST_GAME_DAYS","OPP_LAST_GAME_DAYS","START_POSITION","DISTANCE","ALTITUDE","IS_HOME","OPP_DEF_PREVRANK","OPP_DEF_RT3RANK","OPP_DEF_AVGRANK","LAST_PTS"],"LEARNERRANGE_USED":[[0.8732148272461385,1.1985050742628736],[1.2769604113993942,1.561516751818503],[1.8106277837589935,2.1763233734759355],[0.6407119951010938,0.869742092894692],[0.5388015104534715,0.668161008571947],[0.29963467243087477,0.4625817712866743],[0.7771259677674539,1.2280404355522967]],"EPOCH_LEARN_STATES":[{"EPOCH":0,"LEARN_RATE":0.0001,"CURRENT_LOSS":0.0},{"EPOCH":1,"LEARN_RATE":0.0001,"CURRENT_LOSS":82.06503295898438},{"EPOCH":2,"LEARN_RATE":0.0001,"CURRENT_LOSS":53.26078414916992},{"EPOCH":3,"LEARN_RATE":0.00020283058901283534,"CURRENT_LOSS":52.7872314453125},{"EPOCH":4,"LEARN_RATE":0.0002200035701984702,"CURRENT_LOSS":52.53438949584961},{"EPOCH":5,"LEARN_RATE":0.00023223055192902344,"CURRENT_LOSS":52.64951705932617},{"EPOCH":6,"LEARN_RATE":0.0001827445535506266,"CURRENT_LOSS":51.70900344848633},{"EPOCH":7,"LEARN_RATE":0.0001860984363387262,"CURRENT_LOSS":51.58851623535156},{"EPOCH":8,"LEARN_RATE":0.00021647287501592966,"CURRENT_LOSS":51.59293746948242},{"EPOCH":9,"LEARN_RATE":0.00020562093348485566,"CURRENT_LOSS":51.69764709472656},{"EPOCH":10,"LEARN_RATE":0.00017593995175523128,"CURRENT_LOSS":51.33467102050781},{"EPOCH":0,"LEARN_RATE":9.999999747378752e-05,"CURRENT_LOSS":0.0},{"EPOCH":1,"LEARN_RATE":9.999999747378752e-05,"CURRENT_LOSS":80.22447204589844},{"EPOCH":2,"LEARN_RATE":9.999999747378752e-05,"CURRENT_LOSS":53.13869094848633},{"EPOCH":3,"LEARN_RATE":0.00021186219237279147,"CURRENT_LOSS":52.77824020385742},{"EPOCH":4,"LEARN_RATE":0.00021023530280217528,"CURRENT_LOSS":52.36281967163086},{"EPOCH":5,"LEARN_RATE":0.00019738530681934208,"CURRENT_LOSS":51.856937408447266},{"EPOCH":6,"LEARN_RATE":0.0002157624694518745,"CURRENT_LOSS":52.014617919921875},{"EPOCH":7,"LEARN_RATE":0.00014621867740061134,"CURRENT_LOSS":51.612815856933594},{"EPOCH":8,"LEARN_RATE":0.00013340146688278764,"CURRENT_LOSS":51.206268310546875},{"EPOCH":9,"LEARN_RATE":0.00015486300981137902,"CURRENT_LOSS":51.238365173339844},{"EPOCH":10,"LEARN_RATE":0.00011746872769435868,"CURRENT_LOSS":51.13994598388672},{"EPOCH":11,"LEARN_RATE":0.00013501748617272824,"CURRENT_LOSS":50.9933967590332},{"EPOCH":12,"LEARN_RATE":0.00012737410725094378,"CURRENT_LOSS":50.92128372192383},{"EPOCH":13,"LEARN_RATE":0.00014448189176619053,"CURRENT_LOSS":50.98763656616211}],"RUN_TIME_DATE":"2024-03-19_17-35-12","TOP_PATH":"C:\\Files\\source\\current\\home\\sportsai/data/ai/top/21.99_2024-03-19_17-35-12_ALL_PTS/","EVAL_LOSS":0.0,"PRED_CORRECT_COUNT":274,"PRED_TOTAL_COUNT":1246,"PRED_PERCENTAGE":21.990369181380416}
    ,{"TARGET_COLUMN":"PTS","MAIN_FILTERS":{"POSITION":"ALL","MINAVG":9,"MAXAVG":-1},"MODEL_SHUFFLE_DATA":True,"MODEL_BATCH_SIZE":"1305","MAX_CATPART":"295","MODEL_LEARNING_RATE":0.0012123595505617979,"TRAIN_EPOCH_COUNT":"12","CONFIDENCE_CHECKS":"3","AI_SAVE_STATE":True,"HOME_START_AMPLIFY":[3,6],"RESET_STATE_ON_NEWRUN":True,"TRAIN_START_YEAR":2007,"VALID_START_YEAR":2021,"TEST_START_YEAR":2022,"PRED_START_DATE":"2024-11-01","MODEL_LAYERS":{"LAYER_1":{"ACTIVATION":"sigmoid","UNITS":257,"DROPOUT":0.47000000000000003},"LAYER_2":{"ACTIVATION":"relu","UNITS":377,"DROPOUT":0.2},"LAYER_3":{"ACTIVATION":"relu","UNITS":1,"DROPOUT":-1}},"CATEGORY_COLUMNS":["START_POSITION","OFFICIAL2","AGE","HEIGHT","COUNTRY","OPP_PLAYER_ID","SEASON"],"FEATURE_COLUMNS":["IS_HOME","YEARS_IN_TEAM","IS_STARTING","OPP_DISTANCE","LAST_GAME_DAYS","TWIN","OLOSS","GAMES_IN","GAMES_CONT","GAMES_START","AVG_MIN","RT3_MIN","RT9_MIN","AVG_PTS","RT3_PTS","RT5_PTS","RT9_PTS","AVG_REB","RT3_REB","AVG_AST","RT3_AST","RT3_FGM","AVG_FGA","RT3_FGA","AVG_FG3M","RT3_FG3M","RT3_FG3A","AVG_FTM","RT3_FTM","AVG_FTA","RT3_FTA","RTZ_REB","RTZ_AST","RTZ_FGM","RTZ_FGA","RTZ_FG3M","RTZ_FG3A","RTZ_FTM","RTZ_FTA","PREV_PTS","PREV_AST","PREV_REB","PREV_MIN","PREV_FGA","PREV_FGM","PREV_FTA","PREV_FG3A","PREV_FG3M","LOSSES_B","DISTANCE_B","GAMES_OUT_B","OPP_WINS_B","OWIN_B","DAYS_OUT_B","BACKTOBACKGAME_B","WEEK_PLAYTIME_B","ALTITUDE_B","OPP_LAST_GAME_DAYS_B","OPP_BACKTOBACKGAME","OPP_WEEK_PLAYTIME","OPP_DEF_PTS1","OPP_DEF_PTS5","OPP_DEF_PTS9","OPP_DEF_PTSAVG","OPP_DEF_REB1","OPP_DEF_REB3","OPP_DEF_REBAVG","OPP_DEF_AST1","OPP_DEF_AST3","OPP_DEF_ASTAVG","TEAM_OUT","OPP_OUT","MAX_PTS","MAX_MIN","PREV_PF","RT3_PF","AVG_PF","PREV_STL","RT3_STL","AVG_STL","PREV_BLK","OPP_PREV_PF_B","OPP_RT3_PF_B","OPP_PREV_STL_B","OPP_RT3_STL_B","OPP_AVG_STL_B","OPP_PREV_BLK_B","OPP_AVG_BLK_B","OPP_DEF_PREVRANK_B","OPP_DEF_RT3RANK_B","OPP_DEF_AVGRANK_B","MAX_FGA","MAX_FGM","MAX_FTA","MAX_FTM","MAX_FG3A","MAX_FG3M","TEAM_CENTERS_IN_B","TEAM_FORWARDS_IN_B","TEAM_GUARDS_IN_B","OPP_CENTERS_IN_B","OPP_FORWARDS_IN_B","OPP_GUARDS_IN_B"],"PREDICTION_OUTPUT_COLUMNS":["SEASON","GAME_ID","PLAYER_ID","GAME_DATE","TEAM_NAME","PLAYER_NAME","AVG_PTS","RTZ_PTS","RT3_PTS","RT5_PTS","RT9_PTS","PREV_PTS","TEAM_OUT","OPP_OUT","OPP_PLAYER_ID","OPP_PLAYER_NAME","OPP_DEF_PTS1","OPP_DEF_PTS3","OPP_DEF_PTSAVG","WEEK_PLAYTIME","OPP_WEEK_PLAYTIME","LAST_GAME_DAYS","OPP_LAST_GAME_DAYS","START_POSITION","DISTANCE","ALTITUDE","IS_HOME","OPP_DEF_PREVRANK","OPP_DEF_RT3RANK","OPP_DEF_AVGRANK","LAST_PTS"],"LEARNERRANGE_USED":[[0.8862998893155283,1.035603899600525],[1.2437994233658478,1.5733091205117218],[1.8204325228733473,2.423824163699136],[0.6056021081182787,0.8779342636402696],[0.474707069145694,0.6126979743688145],[0.2305457629631285,0.4917499853283813],[0.7589425104255332,1.2687482235319232]],"EPOCH_LEARN_STATES":[{"EPOCH":0,"LEARN_RATE":0.0012123595505617979,"CURRENT_LOSS":0.0},{"EPOCH":1,"LEARN_RATE":0.0012123595505617979,"CURRENT_LOSS":175.14971923828125},{"EPOCH":2,"LEARN_RATE":0.0012123595505617979,"CURRENT_LOSS":68.23552703857422},{"EPOCH":3,"LEARN_RATE":0.0024209536610144597,"CURRENT_LOSS":55.45309066772461},{"EPOCH":4,"LEARN_RATE":0.0051245232562877885,"CURRENT_LOSS":51.97819900512695},{"EPOCH":5,"LEARN_RATE":0.006758634569127571,"CURRENT_LOSS":50.72761535644531},{"EPOCH":6,"LEARN_RATE":0.009848252215117672,"CURRENT_LOSS":49.977935791015625},{"EPOCH":7,"LEARN_RATE":0.009960604122591199,"CURRENT_LOSS":49.6505241394043},{"EPOCH":8,"LEARN_RATE":0.009984982557935784,"CURRENT_LOSS":49.464019775390625},{"EPOCH":0,"LEARN_RATE":0.0012123595224693418,"CURRENT_LOSS":0.0},{"EPOCH":1,"LEARN_RATE":0.0012123595224693418,"CURRENT_LOSS":164.7959442138672},{"EPOCH":2,"LEARN_RATE":0.0012123595224693418,"CURRENT_LOSS":65.21603393554688},{"EPOCH":3,"LEARN_RATE":0.002750190906226635,"CURRENT_LOSS":54.375938415527344},{"EPOCH":4,"LEARN_RATE":0.0060975137166678905,"CURRENT_LOSS":51.92042922973633},{"EPOCH":5,"LEARN_RATE":0.009488517418503761,"CURRENT_LOSS":50.629878997802734},{"EPOCH":6,"LEARN_RATE":0.012522517703473568,"CURRENT_LOSS":49.7063102722168},{"EPOCH":7,"LEARN_RATE":0.011211687698960304,"CURRENT_LOSS":49.480987548828125},{"EPOCH":8,"LEARN_RATE":0.010239989496767521,"CURRENT_LOSS":49.09011459350586},{"EPOCH":9,"LEARN_RATE":0.010474479757249355,"CURRENT_LOSS":48.97869873046875},{"EPOCH":0,"LEARN_RATE":0.0012123595224693418,"CURRENT_LOSS":0.0},{"EPOCH":1,"LEARN_RATE":0.0012123595224693418,"CURRENT_LOSS":179.6542510986328},{"EPOCH":2,"LEARN_RATE":0.0012123595224693418,"CURRENT_LOSS":67.46993255615234},{"EPOCH":3,"LEARN_RATE":0.002402817364782095,"CURRENT_LOSS":56.2615966796875},{"EPOCH":4,"LEARN_RATE":0.005363052245229483,"CURRENT_LOSS":52.35047912597656},{"EPOCH":5,"LEARN_RATE":0.007948559708893299,"CURRENT_LOSS":50.30698776245117},{"EPOCH":6,"LEARN_RATE":0.010885805822908878,"CURRENT_LOSS":49.725860595703125},{"EPOCH":7,"LEARN_RATE":0.009782332926988602,"CURRENT_LOSS":49.260169982910156},{"EPOCH":8,"LEARN_RATE":0.009858348406851292,"CURRENT_LOSS":49.172183990478516}],"RUN_TIME_DATE":"2024-03-16_17-38-34","TOP_PATH":"C:\\Files\\source\\current\\home\\sportsai/data/ai/top/26.11_2024-03-16_17-38-34_FORWARD_PTS/","EVAL_LOSS":0.0,"PRED_CORRECT_COUNT":59,"PRED_TOTAL_COUNT":226,"PRED_PERCENTAGE":26.10619469026549}]


def run_loop(stop_index = 100):
    counter = 0
    while counter < stop_index:
        counter += 1
        clear_mainstate()
        generate_settings()
        main_process()

def run_once():
    main_process()

def run_loaded():
    for _item in LOADED_STATES:
        clear_mainstate()
        load_state(_item)
        main_process()

def clear_mainstate():
    global EPOCH_LEARN_STATES, AI_LEARNER, EVAL_LOSS, CURRENT_LOSS, MAIN_STATE
    tf.keras.backend.clear_session()
    gc.collect()
    mnu.debug_print("new_mainstate...", 0)
    EPOCH_LEARN_STATES = []
    AI_LEARNER = []
    EVAL_LOSS = '0.000'
    CURRENT_LOSS = 0.0
    MAIN_STATE = {'TARGET_COLUMN': TARGET_USED,'MAIN_FILTERS': FILTERS_USED,'MODEL_SHUFFLE_DATA': SHUFFLE_USED,'MODEL_BATCH_SIZE': BATCHSIZE_USED,'MAX_CATPART':MAX_CATPART_USED,'BATCHNORM_USED':BATCHNORM_USED,
              'MODEL_LEARNING_RATE': LEARNING_RATE_USED,'TRAIN_EPOCH_COUNT': EPOCH_COUNT_USED,'CONFIDENCE_CHECKS': CONFIDENCE_USED,
              'AI_SAVE_STATE': AI_SAVE_STATE,'HOME_START_AMPLIFY':HOME_START_AMPLIFY,'RESET_STATE_ON_NEWRUN': RESET_STATE_ON_NEWRUN,
              'TRAIN_START_YEAR': TRAIN_START_YEAR_USED,'VALID_START_YEAR': VALID_START_YEAR_USED,'TEST_START_YEAR': TEST_START_YEAR_USED,'PRED_START_DATE': PRED_START_DATE_USED,
              'MODEL_LAYERS': MODEL_LAYERS_USED,'CATEGORY_COLUMNS': CATEGORY_USED,'FEATURE_COLUMNS': FEATURE_USED,'PREDICTION_OUTPUT_COLUMNS': PREDICTION_OUTPUT_COLUMNS,
              'LEARNERRANGE_USED': LEARNERRANGE_USED,'EPOCH_LEARN_STATES': EPOCH_LEARN_STATES,
              'RUN_TIME_DATE': None, 'TOP_PATH': None,'EVAL_LOSS': EVAL_LOSS,'PRED_CORRECT_COUNT': 0.0, 'PRED_TOTAL_COUNT': 0.0, 'PRED_PERCENTAGE': 0.0}

def load_state(l_state):
    global EPOCH_LEARN_STATES, AI_LEARNER, EVAL_LOSS, CURRENT_LOSS, PREDICTION_OUTPUT_COLUMNS, MAIN_STATE, FEATURE_USED, HOME_START_AMPLIFY,AI_SAVE_STATE, RESET_STATE_ON_NEWRUN
    global CATEGORY_USED,POSITION_USED,TARGET_USED,EPOCH_COUNT_USED,LEARNING_RATE_USED,DROPOUTS_USED,UNITS_USED,ACTIVATIONS_USED,MINMAX_USED,BATCHSIZE_USED,SHUFFLE_USED,TRAIN_START_YEAR_USED,VALID_START_YEAR_USED,TEST_START_YEAR_USED,PRED_START_DATE_USED,CONFIDENCE_USED,LEARNERRANGE_USED,FILTERS_USED,MODEL_LAYERS_USED,MAX_CATPART_USED,L2_USED
    mnu.debug_print("load_state...")
    MAIN_STATE = l_state
    EPOCH_COUNT_USED = int(MAIN_STATE['TRAIN_EPOCH_COUNT'])
    TRAIN_START_YEAR_USED = int(MAIN_STATE['TRAIN_START_YEAR'])
    VALID_START_YEAR_USED = int(MAIN_STATE['VALID_START_YEAR'])
    TEST_START_YEAR_USED = int(MAIN_STATE['TEST_START_YEAR'])
    PRED_START_DATE_USED = MAIN_STATE['PRED_START_DATE']
    MODEL_LAYERS_USED = MAIN_STATE.get('MODEL_LAYERS', {})
    for layer_key, layer_info in MODEL_LAYERS_USED.items():
        if 'UNITS' in layer_info and isinstance(layer_info['UNITS'], (str, int)): # type: ignore
            layer_info['UNITS'] = int(layer_info['UNITS']) # type: ignore
    BATCHSIZE_USED = int(MAIN_STATE['MODEL_BATCH_SIZE'])
    SHUFFLE_USED = bool(MAIN_STATE['MODEL_SHUFFLE_DATA'])
    BATCHNORM_USED = bool(MAIN_STATE['BATCHNORM_USED'])
    EPOCH_LEARN_STATES = MAIN_STATE['EPOCH_LEARN_STATES']
    CONFIDENCE_USED = int(MAIN_STATE['CONFIDENCE_CHECKS'])
    AI_SAVE_STATE = bool(MAIN_STATE['AI_SAVE_STATE'])
    RESET_STATE_ON_NEWRUN = bool(MAIN_STATE['RESET_STATE_ON_NEWRUN'])
    FILTERS_USED = MAIN_STATE['MAIN_FILTERS']
    FILTERS_USED['MINAVG'] =  int(FILTERS_USED.get('MINAVG',-1)) # type: ignore
    FILTERS_USED['MAXAVG'] = int(FILTERS_USED.get('MAXAVG',-1)) # type: ignore
    POSITION_USED = FILTERS_USED.get('POSITION', 'ALL')
    LEARNERRANGE_USED = MAIN_STATE['LEARNERRANGE_USED']
    FEATURE_USED = MAIN_STATE['FEATURE_COLUMNS']
    CATEGORY_USED = MAIN_STATE['CATEGORY_COLUMNS']
    PREDICTION_OUTPUT_COLUMNS = MAIN_STATE['PREDICTION_OUTPUT_COLUMNS']
    TARGET_USED = MAIN_STATE['TARGET_COLUMN']
    MAX_CATPART_USED = int(MAIN_STATE['MAX_CATPART'])
    HOME_START_AMPLIFY = MAIN_STATE.get('HOME_START_AMPLIFY', [1, 1])
    HOME_START_AMPLIFY[0] = int(HOME_START_AMPLIFY[0]) # type: ignore
    HOME_START_AMPLIFY[1] = int(HOME_START_AMPLIFY[1]) # type: ignore
    LEARNING_RATE_USED = MAIN_STATE['MODEL_LEARNING_RATE']

def generate_settings():
    global EPOCH_LEARN_STATES, AI_LEARNER, EVAL_LOSS, CURRENT_LOSS, PREDICTION_OUTPUT_COLUMNS, FEATURE_USED, MAIN_STATE, HOME_START_AMPLIFY
    global CATEGORY_USED,POSITION_USED,TARGET_USED,EPOCH_COUNT_USED,LEARNING_RATE_USED,DROPOUTS_USED,UNITS_USED,ACTIVATIONS_USED,MINMAX_USED,BATCHSIZE_USED,SHUFFLE_USED,TRAIN_START_YEAR_USED,VALID_START_YEAR_USED,TEST_START_YEAR_USED,PRED_START_DATE_USED,CONFIDENCE_USED,LEARNERRANGE_USED,FILTERS_USED,MODEL_LAYERS_USED,MAX_CATPART_USED,L2_USED,BATCHNORM_USED
    mnu.debug_print("generate_settings...", 0)
    ############### FEATURE_USED ###############
    temp_feat = []
    for curr_feat in DEFAULT_FEATURES:
        rand_change = rand.uniform(0.0, 1.0)
        rand_compare = rand.uniform(0.15, .45)
        if rand_change > rand_compare:
            temp_feat.append(curr_feat)
    FEATURE_USED = temp_feat
    ############### POSITION_USED ###############
    temp_pos = ''
    highest_random_value = -1
    for curr_pos in DEFAULT_POSITIONS:
        rand_change = rand.uniform(0.0, 1.0)
        if curr_pos == 'ALL':
            rand_change = rand_change * 1
        if rand_change > highest_random_value:
            highest_random_value = rand_change
            temp_pos = curr_pos
    POSITION_USED = temp_pos
    ############### CATEGORY_USED ###############
    temp_cat = []
    for curr_cat in DEFAULT_CATEGORYS:
        rand_change = rand.uniform(0.0, 1.0)
        rand_compare = rand.uniform(0.15, .35)
        if POSITION_USED != 'ALL' and curr_cat == 'POSITION':
            rand_change = 0.0
        if rand_change > rand_compare:
            temp_cat.append(curr_cat)
    CATEGORY_USED = temp_cat
    ############### TARGET_USED ###############
    temp_target = ''
    highest_random_value = -1
    for curr_pos in DEFAULT_TARGETS:
        rand_change = rand.uniform(0.0, 1.0)
        rand_change = rand_change * 2.0 if curr_pos == DEFAULT_TARGETS[0] else rand_change
        if rand_change > highest_random_value:
            highest_random_value = rand_change
            temp_target = curr_pos
    TARGET_USED = temp_target
    ############### MINMAX_USED ###############
    minmax_range = DEFAULT_TARGET_MINMAX[TARGET_USED]
    use_check = rand.uniform(0.0, 1.0)
    if use_check > 0.50:
        temp_min = rand.integers(minmax_range[0], minmax_range[1])
    else:
        temp_min = -1
    use_check = rand.uniform(0.0, 1.0)
    if use_check > 0.50:
        temp_max = rand.integers(minmax_range[2], minmax_range[3])
    else:
        temp_max = -1
    if temp_min >= temp_max + 1:
        temp_max = -1
    MINMAX_USED[0], MINMAX_USED[1] = temp_min, temp_max
    ############### MAX_CATPART_USED ###############
    temp_maxcatpart = rand.integers(DEFAULT_CAT_RANGE[0], DEFAULT_CAT_RANGE[1])
    MAX_CATPART_USED = temp_maxcatpart
    ############### EPOCH_COUNT_USED ###############
    epoch_ranges = list(range(DEFAULT_EPOCH_RANGE[0], DEFAULT_EPOCH_RANGE[1]))
    weights = [np.exp(-0.1 * (epoch * 0.5)) for epoch in epoch_ranges]
    temp_epoch = rand.choice(epoch_ranges, p=np.array(weights) / np.sum(weights))
    EPOCH_COUNT_USED = temp_epoch
    ############### LEARNING_RATE_USED ###############
    learning_rate_ranges = np.linspace(DEFAULT_LEARNRATE_RANGE[0], DEFAULT_LEARNRATE_RANGE[1], 90)
    learning_rate_weights = [np.exp(-0.1 * (i * 1.4)) for i in range(len(learning_rate_ranges))]
    temp_learning_rate = rand.choice(learning_rate_ranges,p=np.array(learning_rate_weights) / np.sum(learning_rate_weights))
    LEARNING_RATE_USED = temp_learning_rate
    ############### DROPOUTS_USED ###############
    dropout_rate_ranges = np.linspace(DEFAULT_DROPOUTS_RANGE[0], DEFAULT_DROPOUTS_RANGE[1], 60)
    dropout_rate_weights = [np.exp(-0.1 * (i // 10)) for i in range(len(dropout_rate_ranges))]
    temp_dropout_rate1 = rand.choice(dropout_rate_ranges,p=np.array(dropout_rate_weights) / np.sum(dropout_rate_weights))
    temp_dropout_rate2 = rand.choice(dropout_rate_ranges,p=np.array(dropout_rate_weights) / np.sum(dropout_rate_weights))
    DROPOUTS_USED[0], DROPOUTS_USED[1] = temp_dropout_rate1, temp_dropout_rate2
    ############### L2_USED ###############
    random_l2_value1 = rand.uniform(DEFAULT_L2_RANGE[0], DEFAULT_L2_RANGE[1])
    random_l2_value2 = rand.uniform(DEFAULT_L2_RANGE[0], DEFAULT_L2_RANGE[1])
    if random_l2_value1 == 0.0:
        random_l2_value1 = -1.0
    if random_l2_value2 == 0.0:
        random_l2_value2 = -1.0
    L2_USED[0],L2_USED[1] = random_l2_value1, random_l2_value2
    ############### UNITS_USED ###############
    temp_used1, temp_used2 = rand.integers(DEFAULT_UNITS_RANGE[0][0], DEFAULT_UNITS_RANGE[0][1]), rand.integers(DEFAULT_UNITS_RANGE[1][0], DEFAULT_UNITS_RANGE[1][1])
    UNITS_USED[0],UNITS_USED[1] = temp_used1, temp_used2
    ############### ACTIVATIONS_USED ###############
    for indxx, activation in enumerate(ACTIVATIONS_USED):
        temp_activation = ''
        highest_random_value = -1
        for curr_act in DEFAULT_ACTIVATIONS:
            rand_change = rand.uniform(0.0, 1.0)
            rand_change = rand_change * 1.5 if curr_act == 'relu' else rand_change
            if rand_change > highest_random_value:
                highest_random_value = rand_change
                temp_activation = curr_act
        ACTIVATIONS_USED[indxx] = temp_activation
    ACTIVATIONS_USED[2] = 'relu'
    ############### BATCHSIZE_USED ###############
    batch_ranges = list(range(DEFAULT_BATCH_RANGE[0], DEFAULT_BATCH_RANGE[1]))
    weights = [np.exp(-0.1 * (_batch // 100)) for _batch in batch_ranges]
    temp_batch = rand.choice(batch_ranges, p=np.array(weights) / np.sum(weights))
    temp_batch = temp_batch * 1 if POSITION_USED == 'ALL' and MINMAX_USED[0] <= 2 and MINMAX_USED[1] <= 2 and temp_batch < 150 else temp_batch * 1 if POSITION_USED == 'ALL' and MINMAX_USED[0] <= 2 and MINMAX_USED[1] <= 2 else temp_batch
    BATCHSIZE_USED = temp_batch
    ############### SHUFFLE_USED ###############
    rand_change = rand.uniform(0.0, 1.0)
    temp_shuffle = True if rand_change > 0.50 else False
    SHUFFLE_USED = temp_shuffle
    ############### BATCHNORM_USED ###############
    rand_change = rand.uniform(0.0, 1.0)
    temp_batchnorm = True if rand_change > 0.50 else False
    BATCHNORM_USED = temp_batchnorm
    ############### TRAINSTARTYEAR_USED ###############
    temp_startyear = 2005
    highest_random_value = -1
    for curr_startyear in DEFAULT_TRAIN_STARTS:
        rand_change = rand.uniform(0.0, 1.0)
        if rand_change > highest_random_value:
            highest_random_value = rand_change
            temp_startyear = curr_startyear
    TRAIN_START_YEAR_USED = temp_startyear
    ############### VALIDSTARTYEAR_USED AND TESTSTARTYEAR_USED ###############
    highest_random_value = -1
    selected_index = 0
    for idx, curr_startyear in enumerate(DEFAULT_VALID_STARTS):
        rand_change = rand.uniform(0.0, 1.0)
        if rand_change > highest_random_value:
            highest_random_value = rand_change
            selected_index = idx
    VALID_START_YEAR_USED = DEFAULT_VALID_STARTS[selected_index]
    TEST_START_YEAR_USED = DEFAULT_TEST_STARTS[selected_index]
    ############### PREDSTARTDATE_USED ###############
    start_date = datetime.strptime(DEFAULT_PRED_STARTS[0], '%Y-%m-%d')
    # end_date = datetime.strptime(DEFAULT_PRED_STARTS[1], '%Y-%m-%d')
    # random_days = int(np.random.randint(0, (end_date - start_date).days))
    # random_date = start_date + datetime.timedelta(days=random_days)
    string_startdate = start_date.strftime('%Y-%m-%d')
    PRED_START_DATE_USED = string_startdate
    ############### CONFIDENCE_USED ###############
    temp_conf = rand.integers(DEFAULT_CONF_RANGE[0], DEFAULT_CONF_RANGE[1])
    CONFIDENCE_USED = temp_conf
    ############### LEARNERRANGE_USED ###############
    temp_lr_gp = []
    for curr_lr in DEFAULT_LEARNER_RANGES:
        cur_lr_min = rand.uniform(curr_lr[0], curr_lr[1])
        cur_lr_max = rand.uniform(curr_lr[2], curr_lr[3])
        temp_lr_gp.append([cur_lr_min, cur_lr_max])
    LEARNERRANGE_USED = temp_lr_gp
    ############### HOME_START_AMPLIFY ###############
    temp_home = rand.integers(DEFAULT_IS_HOMESTARTER_AMPLIFY[0], DEFAULT_IS_HOMESTARTER_AMPLIFY[1])
    temp_start = rand.integers(DEFAULT_IS_HOMESTARTER_AMPLIFY[2], DEFAULT_IS_HOMESTARTER_AMPLIFY[3])
    HOME_START_AMPLIFY[0], HOME_START_AMPLIFY[1] = temp_home, temp_start
    ############### MAIN_STATE ###############
    FILTERS_USED = {'POSITION': POSITION_USED, 'MINAVG': MINMAX_USED[0], 'MAXAVG': MINMAX_USED[1]}
    MODEL_LAYERS_USED = {
        'LAYER_1': {'ACTIVATION': ACTIVATIONS_USED[0], 'UNITS': UNITS_USED[0], 'DROPOUT': DROPOUTS_USED[0], 'L2_USED':L2_USED[0]},
        'LAYER_2': {'ACTIVATION': ACTIVATIONS_USED[1], 'UNITS': UNITS_USED[1], 'DROPOUT': DROPOUTS_USED[1], 'L2_USED':L2_USED[1]},
        'LAYER_3': {'ACTIVATION': ACTIVATIONS_USED[2], 'UNITS': 1, 'DROPOUT': -1, 'L2_USED': -1}}
    PREDICTION_OUTPUT_COLUMNS =['SEASON', 'GAME_ID', 'PLAYER_ID', 'GAME_DATE', 'TEAM_NAME', 'PLAYER_NAME', f'AVG_{TARGET_USED}',f'RTZ_{TARGET_USED}', f'RT3_{TARGET_USED}', f'RT5_{TARGET_USED}', f'RT9_{TARGET_USED}',f'PREV_{TARGET_USED}',f'LAST_{TARGET_USED}',
                             'TEAM_OUT','OPP_OUT','OPP_PLAYER_ID','OPP_PLAYER_NAME',f'OPP_DEF_{TARGET_USED}1',f'OPP_DEF_{TARGET_USED}3',f'OPP_DEF_{TARGET_USED}AVG','WEEK_PLAYTIME',
                             'OPP_WEEK_PLAYTIME','LAST_GAME_DAYS','OPP_LAST_GAME_DAYS','START_POSITION','DISTANCE','ALTITUDE','IS_HOME',
                             'OPP_DEF_PREVRANK','OPP_DEF_RT3RANK','OPP_DEF_AVGRANK',
                                'OFFICIAL1','OFFICIAL2',
                             f'OFFICIAL1_LAST_{TARGET_USED}','OFFICIAL1_LAST_TO','OFFICIAL1_LAST_PF',
                             f'OFFICIAL1_2NDLAST_{TARGET_USED}','OFFICIAL1_2NDLAST_TO','OFFICIAL1_2NDLAST_PF',
                             f'OFFICIAL1_3RDLAST_{TARGET_USED}','OFFICIAL1_3RDLAST_TO','OFFICIAL1_3RDLAST_PF',
                             f'OFFICIAL1_4THLAST_{TARGET_USED}','OFFICIAL1_4THLAST_TO','OFFICIAL1_4THLAST_PF',
                             f'OFFICIAL1_5THLAST_{TARGET_USED}','OFFICIAL1_5THLAST_TO','OFFICIAL1_5THLAST_PF',
                             f'OFFICIAL1_6THLAST_{TARGET_USED}','OFFICIAL1_6THLAST_TO','OFFICIAL1_6THLAST_PF',
                             f'OFFICIAL2_LAST_{TARGET_USED}','OFFICIAL2_LAST_TO','OFFICIAL2_LAST_PF',
                             f'OFFICIAL2_2NDLAST_{TARGET_USED}','OFFICIAL2_2NDLAST_TO','OFFICIAL2_2NDLAST_PF',
                             f'OFFICIAL2_3RDLAST_{TARGET_USED}','OFFICIAL2_3RDLAST_TO','OFFICIAL2_3RDLAST_PF',
                             f'OFFICIAL2_4THLAST_{TARGET_USED}','OFFICIAL2_4THLAST_TO','OFFICIAL2_4THLAST_PF',
                             f'OFFICIAL2_5THLAST_{TARGET_USED}','OFFICIAL2_5THLAST_TO','OFFICIAL2_5THLAST_PF',
                             f'OFFICIAL2_6THLAST_{TARGET_USED}','OFFICIAL2_6THLAST_TO','OFFICIAL2_6THLAST_PF'
                                ]

        # ['SEASON', 'GAME_ID', 'PLAYER_ID', 'GAME_DATE', 'TEAM_NAME', 'PLAYER_NAME', f'AVG_{TARGET_USED}',f'RTZ_{TARGET_USED}', f'RT3_{TARGET_USED}', f'RT5_{TARGET_USED}', f'RT9_{TARGET_USED}',f'PREV_{TARGET_USED}',f'LAST_{TARGET_USED}',
        #                          'TEAM_OUT','OPP_OUT','OPP_PLAYER_ID','OPP_PLAYER_NAME',
        #                          f'OPP_DEF_{TARGET_USED}1',f'OPP_DEF_{TARGET_USED}3',f'OPP_DEF_{TARGET_USED}AVG','WEEK_PLAYTIME',
        #                          'OPP_WEEK_PLAYTIME','LAST_GAME_DAYS','OPP_LAST_GAME_DAYS','START_POSITION','DISTANCE','ALTITUDE','IS_HOME',
        #                          'OPP_DEF_PREVRANK','OPP_DEF_RT3RANK','OPP_DEF_AVGRANK']

    MAIN_STATE = {'TARGET_COLUMN': TARGET_USED,'MAIN_FILTERS': FILTERS_USED,'MODEL_SHUFFLE_DATA': SHUFFLE_USED,'MODEL_BATCH_SIZE': BATCHSIZE_USED,'MAX_CATPART':MAX_CATPART_USED,
              'MODEL_LEARNING_RATE': LEARNING_RATE_USED,'TRAIN_EPOCH_COUNT': EPOCH_COUNT_USED,'CONFIDENCE_CHECKS': CONFIDENCE_USED,
              'AI_SAVE_STATE': AI_SAVE_STATE,'HOME_START_AMPLIFY':HOME_START_AMPLIFY,'RESET_STATE_ON_NEWRUN': RESET_STATE_ON_NEWRUN,
              'TRAIN_START_YEAR': TRAIN_START_YEAR_USED,'VALID_START_YEAR': VALID_START_YEAR_USED,'TEST_START_YEAR': TEST_START_YEAR_USED,'PRED_START_DATE': PRED_START_DATE_USED,
              'MODEL_LAYERS': MODEL_LAYERS_USED,'CATEGORY_COLUMNS': CATEGORY_USED,'FEATURE_COLUMNS': FEATURE_USED,'PREDICTION_OUTPUT_COLUMNS': PREDICTION_OUTPUT_COLUMNS,
              'LEARNERRANGE_USED': LEARNERRANGE_USED,'EPOCH_LEARN_STATES': EPOCH_LEARN_STATES,
              'RUN_TIME_DATE': None, 'TOP_PATH': None,'EVAL_LOSS': EVAL_LOSS,'PRED_CORRECT_COUNT': 0.0, 'PRED_TOTAL_COUNT': 0.0, 'PRED_PERCENTAGE': 0.0}
    ############### PRINT_CHANGES ###############
    mnu.debug_print(f'{len(FEATURE_USED)} FEATURE_COLUMNS_USED:{FEATURE_USED}', 1)
    mnu.debug_print(f'{len(CATEGORY_USED)} CATEGORY_COLUMNS_USED:{CATEGORY_USED}',1)
    mnu.debug_print(f'TARGET_USED:{TARGET_USED}',0)
    mnu.debug_print(f'EPOCH_COUNT_USED:{EPOCH_COUNT_USED}',0)
    mnu.debug_print(f'LEARNING_RATE_USED:{LEARNING_RATE_USED}',0)
    mnu.debug_print(f'BATCHSIZE_USED:{BATCHSIZE_USED}',0)
    mnu.debug_print(f'SHUFFLE_USED:{SHUFFLE_USED}',0)
    mnu.debug_print(f'BATCHNORM_USED:{BATCHNORM_USED}', 0)
    mnu.debug_print(f'HOME_START_AMPLIFY:{HOME_START_AMPLIFY}',0)
    mnu.debug_print(f'TRAIN_START_YEAR_USED:{TRAIN_START_YEAR_USED}',0)
    mnu.debug_print(f'VALID_START_YEAR_USED:{VALID_START_YEAR_USED}',0)
    mnu.debug_print(f'TEST_START_YEAR_USED:{TEST_START_YEAR_USED}',0)
    mnu.debug_print(f'PRED_START_DATE_USED:{PRED_START_DATE_USED}', 0)
    mnu.debug_print(f'CONFIDENCE_USED:{CONFIDENCE_USED}',0)
    mnu.debug_print(f'LEARNERRANGE_USED:{LEARNERRANGE_USED}',0)
    mnu.debug_print(f'MAX_CATPART_USED:{MAX_CATPART_USED}', 0)
    mnu.debug_print(f'FILTERS_USED:{FILTERS_USED}',1)
    mnu.debug_print(f'MODEL_LAYERS_USED:{MODEL_LAYERS_USED}',1)
    mnu.debug_print(f'PREDICTION_OUTPUT_COLUMNS:{PREDICTION_OUTPUT_COLUMNS}',0)


class LossHistory(tf.keras.callbacks.Callback):
    def on_epoch_end(self, epoch, logs=None):
        global CURRENT_LOSS
        if logs is not None:
            loss = logs.get("loss")
            if loss is not None:
                CURRENT_LOSS = loss

def learning_scheduler(epoch, lr):
    rand_change = 1.0
    loss_change = 1.0
    type_change = 6
    if len(AI_LEARNER) < 2:
        previous_loss = CURRENT_LOSS
    else:
        last_learner = AI_LEARNER[-1]
        previous_loss = last_learner[-3]
        loss_change = previous_loss - CURRENT_LOSS
        if 1.0 > loss_change > 0.01:
            type_change = 0
        elif 5.0 > loss_change > 1.0:
            type_change = 1
        elif loss_change > 5.0:
            type_change = 2
        elif -0.01 > loss_change > -1.0:
            type_change = 3
        elif -5.0 < loss_change < -1.0:
            type_change = 4
        elif loss_change < -5.0:
            type_change = 5
        else:
            type_change = 6
        rand_change = rand.uniform(LEARNERRANGE_USED[type_change][0], LEARNERRANGE_USED[type_change][1])
    next_lr = lr * rand_change
    mnu.debug_print(f'\n Epoch: {epoch} |  LR: {lr} | NEXT_LR: {next_lr} | LOSS: {CURRENT_LOSS} | PREV_LOSS: {previous_loss} | LOSS_CHANGE: {loss_change} | RANDOM: {rand_change} | TYPE: {type_change}', 0)
    learner_item = [epoch, lr, next_lr, CURRENT_LOSS, loss_change, rand_change]
    AI_LEARNER.append(learner_item)
    epoch_item = {'EPOCH': epoch, 'LEARN_RATE': lr, 'CURRENT_LOSS': CURRENT_LOSS}
    EPOCH_LEARN_STATES.append(epoch_item)
    return next_lr

def create_compile_model(_nums_layer,_cats_layer):
    mnu.debug_print('Combining Layers and Inputs....',0)
    x = _nums_layer if len(_cats_layer) == 0 else tf.keras.layers.Concatenate()([_nums_layer] + [item[0] for item in _cats_layer])
    inputs = [_nums_layer] if len(_cats_layer) == 0 else [_nums_layer] + [item[1] for item in _cats_layer]
    mnu.debug_print('Creating Layers...',0)
    output = None
    for layer_name, layer_params in MODEL_LAYERS_USED.items():
        if layer_params['UNITS'] != 1:
            if layer_params['L2_USED'] != -1:
                x = tf.keras.layers.Dense(layer_params['UNITS'], kernel_regularizer=tf.keras.regularizers.L2(layer_params['L2_USED']))(x)
            else:
                x = tf.keras.layers.Dense(layer_params['UNITS'])(x)
            if BATCHNORM_USED:
                x = tf.keras.layers.BatchNormalization()(x)
            x = tf.keras.layers.Activation(layer_params['ACTIVATION'])(x)
            if layer_params['DROPOUT'] != -1:
                x = tf.keras.layers.Dropout(layer_params['DROPOUT'])(x)
        else:
            output = tf.keras.layers.Dense(layer_params['UNITS'], activation=layer_params['ACTIVATION'])(x)
    mnu.debug_print("Creating Model....",0)
    _nn_model = tf.keras.Model(inputs=inputs, outputs=output)
    if gls.PRINT_LEVEL == 0:
        _nn_model.summary()
    mnu.debug_print('Compiling Model...',0)
    _nn_model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=LEARNING_RATE_USED), loss='mse',metrics='mae')
    return _nn_model


# OLD CREATE
    # for layer_name, layer_params in MODEL_LAYERS_USED.items():
    #     if layer_params['UNITS'] != 1:
    #         if layer_params['L2_USED'] != -1:
    #             x = tf.keras.layers.Dense(layer_params['UNITS'], activation=layer_params['ACTIVATION'], kernel_regularizer= tf.keras.regularizers.L2(layer_params['L2_USED']))(x)
    #         else:
    #             x = tf.keras.layers.Dense(layer_params['UNITS'], activation=layer_params['ACTIVATION'])(x)
    #         if BATCHNORM_USED:
    #             x = tf.keras.layers.BatchNormalization()(x)
    #         if layer_params['DROPOUT'] != -1:
    #             x = tf.keras.layers.Dropout(layer_params['DROPOUT'])(x)
    #     else:
    #         output = tf.keras.layers.Dense(layer_params['UNITS'], activation=layer_params['ACTIVATION'])(x)

def predict_with_uncertainty(model, pred_group, n_iter=100):
    mnu.debug_print("predict_with_uncertainty...",0)
    preds = []
    for _ in range(n_iter):
        preds.append(model.predict(pred_group))
    preds = np.array(preds)
    mean_preds = np.mean(preds, axis=0)
    std_preds = np.std(preds, axis=0)
    return mean_preds, std_preds

def filter_data(current_df):
    mnu.debug_print("filter_data...",0)
    filtered_filters = {k: v for k, v in FILTERS_USED.items() if v != -1 and v != 'ALL'}
    for keyword, k_value in filtered_filters.items():
        mnu.debug_print(f"(AllDataRows) type:{keyword} | value:{k_value} | before:{len(current_df)}",0)
        if 'MAXAVG' in keyword:
            current_df = current_df.groupby(['PLAYER_ID','SEASON']).filter(lambda x: x[TARGET_USED].mean() <= k_value)
        elif 'MINAVG' in keyword:
            current_df = current_df.groupby(['PLAYER_ID','SEASON']).filter(lambda x: x[TARGET_USED].mean() >= k_value)
        elif 'POSITION' in keyword:
            current_df = current_df[current_df['POSITION'] == k_value]
        else:
            mnu.debug_print(f'Error Unknown filter:{keyword}',0)
        mnu.debug_print(f"(AllDataRows) type:{keyword} | value:{k_value} | after:{len(current_df)}",0)
    return current_df

def generate_category_features(all_dataframe, cat_feats, train_ind, valid_ind, test_ind, pred_ind):
    mnu.debug_print("generate_category_features...",0)
    cat_groups  = {'train': [], 'valid': [], 'test': [], 'pred': [], 'input': []}
    for item in cat_feats:
        mnu.debug_print(f'Generating Category: {item}',0)
        category_series = all_dataframe[item].astype(str)
        unique_categories = np.unique(category_series)
        category_size = len(unique_categories)
        vocab_size = len({word for name in unique_categories for word in name.replace("'", "").split()})
        maxlen = max(len(name.split()) for name in unique_categories)
        output_size = int(min(np.ceil(category_size / 2), MAX_CATPART_USED))
        cat_to_index = {cat: idx for idx, cat in enumerate(unique_categories)}
        mnu.debug_print(f'{item} PROPERTIES -> category_size:{category_size} | vocab_size:{vocab_size} | maxlen:{maxlen} | output_size:{output_size}',0)
        for subset_name, indices in zip(['train', 'valid', 'test', 'pred'], [train_ind, valid_ind, test_ind, pred_ind]):
            subset_indices = [cat_to_index[cat] for cat in category_series[indices]]
            encoded_cats = tf.keras.utils.to_categorical(subset_indices, num_classes=vocab_size)
            padded_cats = tf.keras.preprocessing.sequence.pad_sequences(encoded_cats, maxlen=maxlen, padding='post', value=0.0)
            mnu.debug_print(f'({subset_name.capitalize()}) -> {item} Size:{len(subset_indices)} | Encoded:{len(encoded_cats[0])} | Padded:{len(padded_cats[0])}', 0)
            cat_groups[subset_name].append(padded_cats)
        inp_cat = tf.keras.layers.Input(shape=(maxlen,))
        emb_cat = tf.keras.layers.Embedding(input_dim=vocab_size, output_dim=output_size, input_length=maxlen, name=item)(inp_cat)
        layer_cat = tf.keras.layers.Flatten()(emb_cat)
        cat_groups['input'].append([layer_cat, inp_cat])
    return [cat_groups[group] for group in ['train', 'valid', 'test', 'pred', 'input']]

def set_state_values(_nn_model, scaler, season_file):
    mnu.debug_print("set_state_values...",0)
    invalid_min_percentage = 15.0
    prediction_min_percentage = 10.0
    invalid_value = 1
    min_unique_guess_count = 5
    pred_correct_cnt = (season_file['CORRECT'] == 1).sum()
    pred_total_cnt = len(season_file)
    pred_pct = pred_correct_cnt / pred_total_cnt * 100
    pred_type = POSITION_USED
    correct_predictions = season_file[season_file['CORRECT'] == 1]
    unique_preds_when_correct = correct_predictions[f'{TARGET_USED}_PRED'].unique()
    unique_pred_guess_cnt = len(unique_preds_when_correct)
    unique_ids = season_file['PLAYER_ID'].unique()
    unique_id_cnt = len(unique_ids)
    pred_correct_minimum = season_file[(season_file['CORRECT'] == 1) & (season_file[f'{TARGET_USED}_PRED'] < invalid_value)]
    count_pred_correct_minimum = len(pred_correct_minimum)
    invalids_pct = count_pred_correct_minimum / (pred_correct_cnt + 0.0001) * 100
    mnu.debug_print(f'For Season: {rns.prediction_date} | Percentage Correct: {pred_pct}% -- ({pred_correct_cnt} of {pred_total_cnt}) Total with {invalids_pct}% Invalids and ({unique_pred_guess_cnt}:UniqueGuess) and ({unique_id_cnt}:UniquePlayer)')
    pred_percentage = round(pred_pct, 2)
    formatted_short = "{:.2f}".format(pred_percentage)
    now = datetime.now()
    run_date = now.strftime("%Y-%m-%d_%H-%M-%S")
    TOP_PATH = f'{gls.TOP_OUTPUT_DIR}{formatted_short}_{run_date}_{pred_type}_{TARGET_USED}/'
    new_data = {'title': f'{formatted_short}', 'date': run_date,'percentage': pred_pct}
    config = configparser.ConfigParser()
    config.read(gls.CFG_FILE)
    top_preds = ast.literal_eval(config['DEFAULT']['top_preds'])
    if unique_pred_guess_cnt > min_unique_guess_count and invalids_pct < invalid_min_percentage and pred_percentage >= prediction_min_percentage and (len(top_preds) < 300 or new_data['percentage'] > top_preds[-1]['percentage']):
        mnu.debug_print(f'Saving New TopPreds - Percentage:{formatted_short} at path: {TOP_PATH}')
        top_preds.append(new_data)
        top_preds.sort(key=lambda x: x['percentage'], reverse=True)
        top_preds = top_preds[:300]
        config['DEFAULT']['top_preds'] = json.dumps(top_preds)
        with open(gls.CFG_FILE, 'w', encoding='utf-8') as configfile:
            config.write(configfile)
        MAIN_STATE['PRED_CORRECT_COUNT'] = int(pred_correct_cnt)
        MAIN_STATE['PRED_TOTAL_COUNT'] = int(pred_total_cnt)
        MAIN_STATE['PRED_PERCENTAGE'] = pred_pct
        MAIN_STATE['EVAL_LOSS'] = float(EVAL_LOSS)
        MAIN_STATE['EPOCH_LEARN_STATES'] = EPOCH_LEARN_STATES
        MAIN_STATE['RUN_TIME_DATE'] = run_date
        MAIN_STATE['TOP_PATH'] = TOP_PATH
        os.makedirs(TOP_PATH, exist_ok=True)
        main_state_path = f'{TOP_PATH}main_state.json'
        model_state_file = f'{TOP_PATH}model_state_file.h5'
        scaler_state_file =  f'{TOP_PATH}scaler_state_file.pkl'
        model_weights_file = f'{TOP_PATH}model_weights_file.tf'
        season_file_path =  f'{TOP_PATH}season_file.csv'
        with open(main_state_path, 'w', encoding='utf-8') as f:
            json.dump(MAIN_STATE, f, indent=4, sort_keys=False,default=str)
        try:
            _nn_model.save(model_state_file)
            _nn_model.save_weights(scaler_state_file)
            pd.to_pickle(scaler, model_weights_file)
        except OSError or Exception as e:
            mnu.debug_print(f"An error occurred: {e}")
        season_file.to_csv(season_file_path, index=False)
    elif pred_percentage < prediction_min_percentage:
        mnu.debug_print(f'Below Minimum Ignoring - MinimumPredictionPercentage:{prediction_min_percentage} CurrentPredictionPercentage:{formatted_short}% at RunDate:{run_date}')
    elif invalids_pct >= invalid_min_percentage:
        mnu.debug_print(f'Invalid percentage to high - MinimumInvalidPercentage:{invalid_min_percentage} CurrentInvalidPercentage:{invalids_pct}% at RunDate:{run_date}')
    elif unique_pred_guess_cnt <= min_unique_guess_count:
        mnu.debug_print(f'Not enough unique guesses MinimumGuessCount:{min_unique_guess_count} CurrentGuessCount:({unique_pred_guess_cnt}) at RunDate:{run_date}')
    else:
        mnu.debug_print(f'Below TopPreds Ignoring - Percentage:({formatted_short}) at RunDate:{run_date}')

def main_process():
    #################################################################################################
    ####################################      START PROCESS      ####################################
    #################################################################################################
    mnu.debug_print("AI Process Start....")
    start_time = time.time()
    all_dataframe = pd.read_csv(gls.ALL_FINAL)
    ########################################################
    # all_dataframe['IS_HOME'] = all_dataframe['IS_HOME'].apply(lambda x: HOME_START_AMPLIFY[0] if x == 1 else x)
    # all_dataframe['IS_STARTING'] = all_dataframe['IS_STARTING'].apply(lambda x: HOME_START_AMPLIFY[1] if x == 1 else x)
    ########################################################
    if RESET_STATE_ON_NEWRUN:
        [os.remove(os.path.join(gls.DATAFRAME_AI_DIR, f)) for f in os.listdir(gls.DATAFRAME_AI_DIR) if os.path.isfile(os.path.join(gls.DATAFRAME_AI_DIR, f))]
        mnu.debug_print("Cleared old ai data",0)
    ########################################################
    all_dataframe = filter_data(all_dataframe)
    ########################################################
    mnu.debug_print("Set Features and Targets....",0)
    features = all_dataframe[[col for col in all_dataframe.columns if col in FEATURE_USED]]
    total_rows = len(features)
    if total_rows < 5000:
        mnu.debug_print("Not enough feature data.  Must have more than (10000) resetting....", 0)
        return
    targets = all_dataframe[TARGET_USED]
    ########################################################
    mnu.debug_print("Set Train Valid Test Indicies....",0)
    if rns.use_seasons:
        seasons = all_dataframe['SEASON']
        train_indices = (seasons >= TRAIN_START_YEAR_USED) & (seasons < VALID_START_YEAR_USED)
        valid_indices = (seasons >= VALID_START_YEAR_USED) & (seasons < TEST_START_YEAR_USED)
        test_indices = (seasons >= TEST_START_YEAR_USED) & (all_dataframe['GAME_DATE'] < PRED_START_DATE_USED)
    else:
        train_indices = (all_dataframe['SEASON'] <= TRAIN_START_YEAR_USED) & (all_dataframe['GAME_DATE'] < VALID_START_YEAR_USED)
        valid_indices = (all_dataframe['GAME_DATE'] >= VALID_START_YEAR_USED) & (all_dataframe['GAME_DATE'] < TEST_START_YEAR_USED)
        test_indices = (all_dataframe['GAME_DATE'] >= TEST_START_YEAR_USED) & (all_dataframe['GAME_DATE'] < PRED_START_DATE_USED)
    pred_indices = (all_dataframe['GAME_DATE'] >= PRED_START_DATE_USED)
    pred_indexes = all_dataframe.loc[pred_indices].index
    print(f"Training samples: {train_indices.sum()}")
    print(f"Validation samples: {valid_indices.sum()}")
    print(f"Testing samples: {test_indices.sum()}")
    print(f"Prediction samples: {pred_indices.sum()}")
    if train_indices.sum() < 1 or valid_indices.sum() < 1 or test_indices.sum() < 1 or pred_indices.sum() < 1:
        mnu.debug_print("Not enough data resetting....", 0)
        return
    ########################################################
    mnu.debug_print("Creating Model data....",0)
    scaler = StandardScaler()
    tr_feats = features[train_indices]
    tr_targets = targets[train_indices]
    va_feats = features[valid_indices]
    va_targets = targets[valid_indices]
    te_feats = features[test_indices]
    te_targets = targets[test_indices]
    pr_feats = features[pred_indices]
    pr_targets = targets[pred_indices]
    train_features, train_targets, = scaler.fit_transform(tr_feats), np.array(tr_targets)
    mnu.debug_print(f'(Train) -> NumberFeatures Size:{len(train_features)} | Targets Size:{len(train_targets)}',0)
    valid_features, valid_targets, = scaler.transform(va_feats), np.array(va_targets)
    mnu.debug_print(f'(Valid) -> NumberFeatures Size:{len(valid_features)} | Targets Size:{len(valid_targets)}',0)
    test_features, test_targets, = scaler.transform(te_feats), np.array(te_targets)
    mnu.debug_print(f'(Test) -> NumberFeatures Size:{len(test_features)} | Targets Size:{len(test_targets)}',0)
    pred_features, pred_targets, = scaler.transform(pr_feats), np.array(pr_targets)
    mnu.debug_print(f'(Pred) -> NumberFeatures Size:{len(pred_features)} | Targets Size:{len(pred_targets)}',0)
    numbers_layer = tf.keras.layers.Input(shape=(train_features.shape[1],))
    mnu.debug_print(f'FeatureNumbers Shape: {numbers_layer.shape}',0)
    ########################################################
    train_cat_group, valid_cat_group, test_cat_group, pred_cat_group, input_cat_group = generate_category_features(all_dataframe=all_dataframe, cat_feats=CATEGORY_USED,train_ind=train_indices,valid_ind=valid_indices,test_ind=test_indices, pred_ind=pred_indices)
    mnu.debug_print('Grouping Train Features....',0)
    train_group = [train_features]
    for i, item in enumerate(train_cat_group):
        train_group.append(item)
    mnu.debug_print('Grouping Valid Features....',0)
    valid_group = [valid_features]
    for i, item in enumerate(valid_cat_group):
        valid_group.append(item)
    mnu.debug_print('Grouping Test Features....',0)
    test_group = [test_features]
    for i, item in enumerate(test_cat_group):
        test_group.append(item)
    mnu.debug_print('Grouping Pred Features....', 0)
    pred_group = [pred_features]
    for i, item in enumerate(pred_cat_group):
        pred_group.append(item)
    ########################################################
    _nn_model = create_compile_model(numbers_layer, input_cat_group)
    mnu.debug_print('Training Model...',0)
    _lrcallback = tf.keras.callbacks.LearningRateScheduler(learning_scheduler)
    _lhcallback = LossHistory()
    _escallback = EarlyStopping(monitor='val_loss', patience=5, min_delta=0.01, restore_best_weights=True)
    _mccallback = ModelCheckpoint(gls.best_model_file, monitor='val_loss', verbose=1, save_best_only=True)
    _history = _nn_model.fit(x=train_group, y=train_targets, validation_data=(valid_group, valid_targets),  callbacks=[_lrcallback, _lhcallback, _escallback, _mccallback], epochs=EPOCH_COUNT_USED,batch_size=BATCHSIZE_USED, shuffle=SHUFFLE_USED)
    ########################################################
    if AI_SAVE_STATE:
        try:
            _nn_model.save(gls.model_state_file)
            _nn_model.save_weights(gls.model_weights_file)
            pd.to_pickle(scaler, gls.scaler_state_file)
        except OSError or Exception as e:
            mnu.debug_print(f"An error occurred: {e}")
    ########################################################
    mnu.debug_print("Evaluating Model...",0)
    _nn_model = load_model(gls.best_model_file)
    test_acc = _nn_model.evaluate(test_group, test_targets)
    EVAL_LOSS = '{:.3f}'.format(test_acc[0]) if test_acc is not None and test_acc[0] is not None else '0.000'
    ########################################################
    # from matplotlib import pyplot
    # pyplot.plot(_history.history['loss'], label='train')
    # pyplot.plot(_history.history['val_loss'], label='valid')
    # pyplot.legend()
    # pyplot.show()
    ########################################################
    mnu.debug_print("Creating Predictions...",0)
    mean_predictions, std_predictions = predict_with_uncertainty(_nn_model, pred_group, n_iter=CONFIDENCE_USED)
    ########################################################
    results_df = pd.DataFrame({
        TARGET_USED: pred_targets,
        f'{TARGET_USED}_PRED': mean_predictions.flatten(),
        'CONF': std_predictions.flatten(),
        'INDEX': pred_indexes.values
    })
    ########################################################
    results_df.to_csv(gls.results_df_file, index=False)
    mnu.debug_print(f'Saved results_df -> {gls.results_df_file}',0)
    linking_df = all_dataframe.loc[pred_indexes, PREDICTION_OUTPUT_COLUMNS]
    linking_df['INDEX'] = pred_indexes.values
    linking_df.reset_index(drop=True, inplace=True)
    linked_df = linking_df.merge(results_df, on='INDEX')
    linked_df.to_csv(gls.linked_df_file, index=False)
    mnu.debug_print(f'Saved linked_df -> {gls.linked_df_file}',0)
    pred_check = DEFAULT_FEATURES + DEFAULT_CATEGORYS
    check_df = all_dataframe.loc[pred_indexes, pred_check]
    check_df['INDEX'] = pred_indexes.values
    check_df.reset_index(drop=True, inplace=True)
    check_df = check_df.merge(results_df, on='INDEX')
    check_df.to_csv(gls.check_df_file, index=False)
    mnu.debug_print(f'Saved check_df -> {gls.check_df_file}', 0)
    ########################################################
    season_file = stb.generate_files(linked_df, EVAL_LOSS, TARGET_USED)
    set_state_values(_nn_model, scaler, season_file)
    mnu.debug_print(f'Elapsed Time: {time.time() - start_time}', 0)
    mnu.debug_print("AI Process End...")
    #################################################################################################
    #################################################################################################

run_loop()
# run_loaded()
# run_once()

mnu.debug_print("Exiting...")
exit()
